     1                                  [org 0x0100]
     2 00000000 E9261E                  jmp start
     3                                  
     4 00000003 19                      rows: db 0x19 ;25 in Hex
     5 00000004 50                      cols: db 0x50 ;80 in Hex
     6 00000005 00<rep FA0h>            screenBuffer: times 4000 db 0 
     7 00000FA5 0700                    BuildingWallRepition: dw 7
     8 00000FA7 A005                    RoadStart: dw 1440
     9 00000FA9 2C08                    RoadLines: dw 2092
    10 00000FAB 2008                    RoadLineStart: dw 2080
    11 00000FAD 2800                    CarStart: dw 40
    12 00000FAF 0E00                    CarWidth: dw 14
    13 00000FB1 0600                    linesAmount: dw 6
    14 00000FB3 BE08                    endRoadLine: dw 2238  ;2078 initial
    15 00000FB5 6009                    SkyStart: dw 2400
    16 00000FB7 A80C                    yellowBrickStart: dw 3240
    17 00000FB9 700D                    rabbitStart: dw 3440
    18 00000FBB D20C                    rabbithead: dw 3282
    19 00000FBD C00D                    GrassStart: dw 3520
    20 00000FBF 000F                    SandStart: dw 3840
    21 00000FC1 7F                      RabbitColor: db 0x7F
    22 00000FC2 F0                      RabbitEyeColor: db 0xF0
    23 00000FC3 3900                    JumpKey: dw 0x39
    24 00000FC5 2700                    exitKey: dw 0x27
    25 00000FC7 00000000                OldKeyboardInterrupt: dd 0
    26 00000FCB 00000000                OldTimerInterrupt: dd 0
    27 00000FCF 0000                    tickcount: dw 0
    28 00000FD1 00                      endCondition: db 0
    29 00000FD2 0000                    BlueBrickCount: dw 0
    30 00000FD4 0000                    BlueBrickTemp: dw 0
    31 00000FD6 00                      BusyMode: db 0
    32 00000FD7 53434F52453A20          Score:                    db 'SCORE: '
    33 00000FDE C8                      Num: 					  db 200
    34 00000FDF 0700                    ScoreLength:				dw 7
    35 00000FE1 0000                    ScoreToDisplay:				dw 0000
    36 00000FE3 0000                    RNG: dw 0
    37 00000FE5 0000                    CarrotFlag: dw 0
    38 00000FE7 2019                    DaySkyColor: dw 0x1920
    39 00000FE9 1400                    NightSkyColor: dw 0020
    40                                  GREEN_COLOR    equ 0x2F20
    41                                  RED_COLOR     equ 0x4020
    42                                  ORANGE_COLOR  equ 0xEE20
    43                                  CYAN_COLOR	  equ 0x3320
    44 00000FEB 2040                    currentColor  dw  RED_COLOR  ; Initial color
    45 00000FED D448                    music_length dw 18644
    46 00000FEF A00F                    ScreenSize: dw 25 * 80 * 2
    47 00000FF1 5000                    ColumnSize: dw 80
    48                                  ; speed Brick: line 379
    49                                  ; introScreenKeyStroke: line 2467
    50                                  ; speed building&car : line 340
    51                                  
    52 00000FF3 2D2D2D2D2D2D2D2D2D-     Title0:					   db '--------------------The Royal Game--------------------'
    52 00000FFC 2D2D2D2D2D2D2D2D2D-
    52 00001005 2D2D54686520526F79-
    52 0000100E 616C2047616D652D2D-
    52 00001017 2D2D2D2D2D2D2D2D2D-
    52 00001020 2D2D2D2D2D2D2D2D2D 
    53 00001029 47726F7570204D656D-     Intro0:					   db 'Group Members'
    53 00001032 62657273           
    54 00001036 4D2E2054616C686120-     Intro1:                    db 'M. Talha Iqbal  22L-6910'
    54 0000103F 497162616C20203232-
    54 00001048 4C2D36393130       
    55 0000104E 44616E6979616C2053-     Intro2:					   db 'Daniyal Sultan  22L-6845'
    55 00001057 756C74616E20203232-
    55 00001060 4C2D36383435       
    56 00001066 496E73747275637469-     Instruction00			   db 'Instructions'
    56 0000106F 6F6E73             
    57 00001072 457870657269656E63-     Instruction0:			   db 'Experience the multi-animation of cars and buildings'
    57 0000107B 6520746865206D756C-
    57 00001084 74692D616E696D6174-
    57 0000108D 696F6E206F66206361-
    57 00001096 727320616E64206275-
    57 0000109F 696C64696E6773     
    58 000010A6 507265737320537061-     Instruction1:			   db 'Press Space to jump the rabbit and score points by catching the carrot'
    58 000010AF 636520746F206A756D-
    58 000010B8 702074686520726162-
    58 000010C1 62697420616E642073-
    58 000010CA 636F726520706F696E-
    58 000010D3 747320627920636174-
    58 000010DC 6368696E6720746865-
    58 000010E5 20636172726F74     
    59                                  
    60 000010EC 47414D45204F564552      Conclusion0:			   db 'GAME OVER'
    61 000010F5 596F75722053636F72-     Conclusion1: 			   db 'Your Score: '
    61 000010FE 653A20             
    62                                  
    63 00001101 41726520596F752053-     Confirmation0:			   db 'Are You Sure You Want To Exit?'
    63 0000110A 75726520596F752057-
    63 00001113 616E7420546F204578-
    63 0000111C 69743F             
    64 0000111F 507265737320457363-     Confirmation1:  		   db 'Press Escape To Exit or any other key To Return'
    64 00001128 61706520546F204578-
    64 00001131 6974206F7220616E79-
    64 0000113A 206F74686572206B65-
    64 00001143 7920546F2052657475-
    64 0000114C 726E               
    65                                  
    66                                  ;Subroutine To Clear Screen
    67 0000114E 06                      clrscr:		push es
    68 0000114F 50                      			push ax
    69 00001150 57                      			push di
    70 00001151 53                      			push bx
    71                                  			
    72 00001152 B800B8                  			mov ax, 0xb800
    73 00001155 8EC0                    			mov es, ax					; point es to video base
    74 00001157 8B1E[0300]              			mov bx, [rows]
    75 0000115B A1[0400]                			mov ax, [cols]
    76 0000115E F7E3                    			mul bx			
    77 00001160 D1E3                    			shl bx, 1					; Configurable screen by making bl dependent on rows n cols
    78 00001162 BF0000                  			mov di, 0					; point di to top left column
    79                                  
    80 00001165 26C7052007              nextloc:	mov word [es:di], 0x0720	; clear next char on screen (07 is Attribute for a White-colored command line and a black bg, and 20 is ASCII for space)
    81 0000116A 83C702                  			add di, 2					; move to next screen location
    82 0000116D 39DF                    			cmp di, bx					; Total bytes in a screen
    83 0000116F 75F4                    			jne nextloc					; if no clear next position
    84                                  
    85 00001171 5B                      			pop bx
    86 00001172 5F                      			pop di
    87 00001173 58                      			pop ax
    88 00001174 07                      			pop es
    89 00001175 C3                      			ret
    90                                  			
    91 00001176 51                      	delay:  push cx
    92 00001177 B9FFFF                  			mov cx, 0xFFFF
    93 0000117A E2FE                    		loop1:	loop loop1
    94 0000117C B9FFFF                  				mov cx, 0xFFFF
    95 0000117F E2FE                    		loop2:	loop loop2
    96 00001181 59                      				pop cx
    97 00001182 C3                      				ret
    98                                  				
    99 00001183 51                      	HyperDelay:  push cx
   100 00001184 B9FFFF                  			mov cx, 0xFFFF
   101 00001187 BA0200                  			mov dx, 2
   102                                  
   103 0000118A E2FE                    		loop6:	loop loop6
   104 0000118C B9FFFF                  				mov cx, 0xFFFF
   105 0000118F E2FE                    		loop5:	loop loop5
   106 00001191 B9FFFF                  				mov cx, 0xFFFF 	
   107 00001194 E2FE                    		loop3:	loop loop3
   108 00001196 B9FFFF                  				mov cx, 0xFFFF
   109                                  				
   110 00001199 4A                      				dec dx
   111 0000119A 83FA00                  				cmp dx, 0
   112 0000119D 75EB                    				jne loop6
   113                                  				
   114 0000119F E2FE                    		loop4:	loop loop4
   115 000011A1 59                      				pop cx
   116 000011A2 C3                      				ret	
   117                                  				
   118 000011A3 C3                      				ret
   119                                  		
   120                                  		miniDelay:
   121 000011A4 E8DCFF                  			call HyperDelay
   122 000011A7 E8D9FF                  			call HyperDelay	
   123 000011AA E8D6FF                  			call HyperDelay
   124                                  			
   125 000011AD C3                      			ret
   126                                  				
   127                                  				
   128                                  ScrollBGRight:
   129 000011AE 55                      	push bp
   130 000011AF 89E5                    	mov bp, sp
   131 000011B1 83EC04                  	sub sp, 4 ; locals
   132                                  
   133 000011B4 50                      	push ax
   134                                  	; bp - 2 = letter
   135                                  	; bp - 4 = column size
   136                                  	
   137 000011B5 B80000                  	mov ax, 0
   138 000011B8 A0[0400]                	mov al, byte [cols]
   139 000011BB 8946FC                  	mov [bp-4], ax
   140                                  
   141 000011BE 06                      	push es
   142 000011BF 1E                      	push ds
   143 000011C0 57                      	push di
   144 000011C1 56                      	push si
   145 000011C2 51                      	push cx
   146                                  
   147 000011C3 B800B8                  	mov ax, 0xb800
   148 000011C6 8EC0                    	mov es, ax
   149 000011C8 8ED8                    	mov ds, ax
   150                                  	
   151                                  	; Copy
   152 000011CA 8B7EFC                  	mov di, [bp-4] ;Row which is to be copied
   153 000011CD 8B4604                  	mov ax, word[bp+4] ;Current row number which is to be pasted
   154                                  	
   155 000011D0 01C0                    	add ax, ax
   156 000011D2 0FAFF8                  	imul di, ax 
   157                                  	
   158 000011D5 83EF02                  	sub di, 2
   159 000011D8 268B05                  	mov ax, [es:di]
   160 000011DB 8946FE                  	mov [bp-2], ax
   161                                  	
   162                                  	; Moving
   163 000011DE 8B7EFC                  	mov di, [bp-4]
   164 000011E1 0FAF7E04                	imul di, word[bp+4]
   165 000011E5 6BFF02                  	imul di, 2
   166 000011E8 83EF02                  	sub di, 2
   167                                  	
   168 000011EB 8B76FC                  	mov si, [bp-4]
   169 000011EE 0FAF7604                	imul si, word[bp+4]
   170 000011F2 6BF602                  	imul si, 2
   171 000011F5 83EE04                  	sub si, 4
   172                                  	
   173 000011F8 8B4EFC                  	mov cx, [bp-4]
   174 000011FB FD                      	std
   175 000011FC F3A5                    	rep movsw
   176                                  	
   177                                  	; Paste
   178 000011FE 8B7EFC                  	mov di, [bp-4]
   179 00001201 8B4604                  	mov ax, word[bp+4]
   180 00001204 83E801                  	sub ax, 1
   181 00001207 01C0                    	add ax, ax
   182 00001209 0FAFF8                  	imul di, ax
   183 0000120C 8B46FE                  	mov ax, [bp-2]
   184 0000120F 268905                  	mov [es:di], ax
   185                                  	
   186 00001212 59                      	pop cx
   187 00001213 5E                      	pop si
   188 00001214 5F                      	pop di
   189 00001215 1F                      	pop ds
   190 00001216 07                      	pop es
   191 00001217 58                      	pop ax
   192 00001218 89EC                    	mov sp, bp
   193 0000121A 5D                      	pop bp
   194 0000121B C20200                  	ret 2
   195                                  	
   196                                  	
   197                                  ScrollBGLeft:
   198 0000121E 55                      	push bp
   199 0000121F 89E5                    	mov bp, sp
   200 00001221 83EC04                  	sub sp, 4 ; 1 word space for local variable
   201                                  	
   202 00001224 50                      	push ax
   203                                  	; bp - 2 = temporary letter
   204                                  	; bp - 4 = column size since ds is changed
   205 00001225 A1[F10F]                	mov ax, [ColumnSize]
   206 00001228 8946FC                  	mov [bp - 4], ax
   207                                  	
   208 0000122B 06                      	push es
   209 0000122C 1E                      	push ds
   210 0000122D 57                      	push di
   211 0000122E 56                      	push si
   212 0000122F 51                      	push cx
   213                                  
   214 00001230 B800B8                  	mov ax, 0xb800
   215 00001233 8EC0                    	mov es, ax
   216 00001235 8ED8                    	mov ds, ax
   217                                  	
   218                                  	; Copy extreme left character ((2 * columnSize * (row - 1))
   219 00001237 8B7EFC                  	mov di, [bp - 4]
   220 0000123A 8B4604                  	mov ax, [bp + 4]
   221 0000123D 48                      	dec ax
   222 0000123E 0FAFF8                  	imul di, ax
   223 00001241 6BFF02                  	imul di, 2
   224 00001244 268B05                  	mov ax, [es:di]
   225 00001247 8946FE                  	mov [bp-2], ax
   226                                  	
   227                                  	; [160] = [162]
   228                                  	; [es:((row - 1) * ColumnSize * 2)] = [ds:(((row - 1) * ColumnSize * 2) + 2)]
   229 0000124A 8B7EFC                  	mov di, [bp - 4]
   230 0000124D 8B4604                  	mov ax, word[bp + 4]
   231 00001250 48                      	dec ax
   232 00001251 0FAFF8                  	imul di, ax
   233 00001254 6BFF02                  	imul di, 2
   234                                  	
   235 00001257 8B76FC                  	mov si, [bp - 4]
   236 0000125A 0FAFF0                  	imul si, ax
   237 0000125D 6BF602                  	imul si, 2
   238 00001260 83C602                  	add si, 2
   239                                  	
   240 00001263 8B4EFC                  	mov cx, [bp - 4]
   241                                  	
   242 00001266 FC                      	cld
   243 00001267 F3A5                    	rep movsw
   244                                  	
   245                                  	; Paste extreme left character to extreme right ((2 * columnSize * row) - 2)
   246 00001269 8B7EFC                  	mov di, [bp - 4]
   247 0000126C 0FAF7E04                	imul di, word[bp + 4]
   248 00001270 6BFF02                  	imul di, 2
   249 00001273 83EF02                  	sub di, 2
   250 00001276 8B46FE                  	mov ax, [bp-2]
   251 00001279 268905                  	mov [es:di], ax
   252                                  	
   253 0000127C 59                      	pop cx
   254 0000127D 5E                      	pop si
   255 0000127E 5F                      	pop di
   256 0000127F 1F                      	pop ds
   257 00001280 07                      	pop es
   258 00001281 58                      	pop ax
   259 00001282 89EC                    	mov sp, bp
   260 00001284 5D                      	pop bp
   261 00001285 C20200                  	ret 2
   262                                  	
   263                                  ScrollLeft:
   264 00001288 55                          push bp
   265 00001289 89E5                        mov bp, sp
   266 0000128B 83EC04                      sub sp, 4 ; locals
   267                                  
   268 0000128E 50                          push ax
   269                                      ; bp - 2 = letter
   270                                      ; bp - 4 = column size
   271                                  
   272 0000128F B80000                      mov ax, 0
   273 00001292 A0[0400]                    mov al, byte [cols]
   274 00001295 8946FC                      mov [bp-4], ax
   275                                  
   276 00001298 06                          push es
   277 00001299 1E                          push ds
   278 0000129A 57                          push di
   279 0000129B 56                          push si
   280 0000129C 51                          push cx
   281                                  
   282 0000129D B800B8                      mov ax, 0xb800
   283 000012A0 8EC0                        mov es, ax
   284 000012A2 8ED8                        mov ds, ax
   285                                      
   286                                      ; Copy extreme left character (0)
   287 000012A4 BF0000                      mov di, 0
   288 000012A7 8B4604                      mov ax, word[bp+4] ; Current row number which is to be pasted
   289 000012AA 01C0                        add ax, ax
   290 000012AC 0FAFF8                      imul di, ax
   291                                      
   292 000012AF 268B05                      mov ax, [es:di]
   293 000012B2 8946FE                      mov [bp-2], ax
   294                                  
   295                                      ; Moving (i * ColumnSize * 2) = (i * ColumnSize * 2) + 2
   296 000012B5 8B7EFC                      mov di, [bp-4]
   297 000012B8 0FAF7E04                    imul di, word[bp+4]
   298 000012BC 6BFF02                      imul di, 2
   299 000012BF 83C702                      add di, 2
   300                                      
   301 000012C2 8B76FC                      mov si, [bp-4]
   302 000012C5 0FAF7604                    imul si, word[bp+4]
   303 000012C9 6BF602                      imul si, 2
   304                                      
   305 000012CC 8B4EFC                      mov cx, [bp-4]
   306 000012CF FD                          std
   307 000012D0 F3A5                        rep movsw
   308                                      
   309                                      ; Paste extreme left character (0)
   310 000012D2 8B7EFC                      mov di, [bp-4]
   311 000012D5 8B4604                      mov ax, word[bp+4]
   312 000012D8 01C0                        add ax, ax
   313 000012DA 0FAFF8                      imul di, ax
   314 000012DD 8B46FE                      mov ax, [bp-2]
   315 000012E0 268905                      mov [es:di], ax
   316                                  
   317 000012E3 59                          pop cx
   318 000012E4 5E                          pop si
   319 000012E5 5F                          pop di
   320 000012E6 1F                          pop ds
   321 000012E7 07                          pop es
   322 000012E8 58                          pop ax
   323 000012E9 89EC                        mov sp, bp
   324 000012EB 5D                          pop bp
   325 000012EC C20200                      ret 2
   326                                  	
   327                                  
   328                                  
   329                                  	; ScrollRoadRight:
   330                                  				; push bp
   331                                  				; mov bp, sp
   332                                  				; sub sp, 4 ; 2 word space for local variable
   333                                  	
   334                                  				; push ax
   335                                  				; ; bp - 2 = temporary letter
   336                                  				; ; bp - 4 = column size since ds is changed
   337                                  				; xor ax, ax
   338                                  				; mov al, byte [cols]
   339                                  				; mov [bp-4], ax
   340                                  	
   341                                  				; push es
   342                                  				; push ds
   343                                  				; push di
   344                                  				; push si
   345                                  				; push cx
   346                                  
   347                                  	; mov ax, 0xb800
   348                                  	; mov es, ax
   349                                  	; mov ds, ax
   350                                  	
   351                                  	; ; Copy extreme right character ((2 * (cols * row)) - 2)
   352                                  	; mov di, [bp-4]
   353                                  	; mov ax, word[bp+4]
   354                                  	; imul di, ax 
   355                                  	; imul di, 2
   356                                  	; sub di, 2
   357                                  	; mov ax, [es:di]
   358                                  	; mov [bp-2], ax
   359                                  	
   360                                  	; ; [es:(i * cols * 2) - 2] = [ds:((i * cols * 2) - 4)]
   361                                  	; mov di, [bp-4]
   362                                  	; imul di, word[bp+4]
   363                                  	; imul di, 2
   364                                  	; sub di, 2
   365                                  	
   366                                  	; mov si, [bp-4]
   367                                  	; imul si, word[bp+4]
   368                                  	; imul si, 2
   369                                  	; sub si, 4
   370                                  	
   371                                  	; mov cx, [bp-4]
   372                                  	; std
   373                                  	; rep movsw
   374                                  	
   375                                  	; ; Paste extreme right character ((2 * (cols * (row - 1))))
   376                                  	; mov di, [bp-4]
   377                                  	; mov ax, word[bp+4]
   378                                  	; sub ax, 1
   379                                  	; imul di, ax 
   380                                  	; imul di, 2
   381                                  	; mov ax, [bp-2]
   382                                  	; mov [es:di], ax
   383                                  	
   384                                  	; pop cx
   385                                  	; pop si
   386                                  	; pop di
   387                                  	; pop ds
   388                                  	; pop es
   389                                  	; pop ax
   390                                  	; mov sp, bp
   391                                  	; pop bp
   392                                  	; ret 2
   393                                  
   394                                  
   395                                  PlaceToMove:
   396 000012EF 50                      	push ax
   397 000012F0 53                      	push bx
   398 000012F1 51                      	push cx
   399                                  	
   400 000012F2 31C0                    	xor ax, ax
   401                                  	PlaceToMove_ScrollBGRight:
   402 000012F4 89C1                    		mov cx, ax
   403 000012F6 51                      		push cx
   404 000012F7 E8B4FE                  		call ScrollBGRight
   405                                  		
   406                                  		; push cx
   407                                  		; call ScrollBGRight   ;speed
   408                                  	
   409 000012FA 40                      		inc ax
   410 000012FB BB0A00                  		mov bx, 10
   411 000012FE 43                      		inc bx ; 1 + FirstSegmentSize (because of row starting at 1)
   412 000012FF 39D8                    		cmp ax, bx
   413 00001301 75F1                    		jnz PlaceToMove_ScrollBGRight
   414                                  	
   415 00001303 59                      	pop cx
   416 00001304 5B                      	pop bx
   417 00001305 58                      	pop ax
   418 00001306 C3                      	ret 
   419                                  	
   420                                  	
   421                                  PlaceToMoveCar:
   422 00001307 50                      	push ax
   423 00001308 53                      	push bx
   424 00001309 51                      	push cx
   425                                  	
   426 0000130A B80B00                  	mov ax, 11
   427                                  
   428                                  	PlaceToMoveCar_ScrollBGLeft:
   429 0000130D 89C1                    		mov cx, ax
   430 0000130F 51                      		push cx
   431 00001310 E80BFF                  		call ScrollBGLeft
   432                                  	
   433 00001313 40                      		inc ax
   434 00001314 BB1000                  		mov bx, 16;was 16
   435                                  		; add bx, 10
   436 00001317 39D8                    		cmp ax, bx
   437 00001319 75F2                    		jnz PlaceToMoveCar_ScrollBGLeft
   438                                  	
   439 0000131B 59                      	pop cx
   440 0000131C 5B                      	pop bx
   441 0000131D 58                      	pop ax
   442 0000131E C3                      	ret 
   443                                  	
   444                                  
   445                                  BrickToMove:
   446 0000131F 6A14                    	push 20  ;brick row which moves
   447                                  
   448 00001321 E88AFE                  	call ScrollBGRight
   449                                  	
   450                                  	; push 20
   451                                  	; call ScrollBGRight ;speed
   452 00001324 C3                      	ret 
   453                                  	
   454                                  ; MoveSecondSegment:
   455                                  	; push ax
   456                                  	; push bx
   457                                  	; push cx
   458                                  	; push dx
   459                                  	
   460                                  	; xor ax, ax
   461                                  	; mov dx, ax
   462                                  	; MoveSecondSegment_ScrollRoadRight:
   463                                  		; mov cx, ax
   464                                  		; push cx
   465                                  		; call ScrollRoadRight
   466                                  	
   467                                  		; inc ax
   468                                  		; inc dx
   469                                  		
   470                                  		; xor bx, bx
   471                                  		; add bx, 80
   472                                  		; cmp dx, bx
   473                                  		; jnz MoveSecondSegment_ScrollRoadRight
   474                                  		
   475                                  	; pop dx
   476                                  	; pop cx
   477                                  	; pop bx
   478                                  	; pop ax
   479                                  	; ret
   480                                  				
   481                                  				
   482 00001325 55                      printCar:			push bp
   483 00001326 89E5                    					mov bp, sp
   484 00001328 06                      					push es
   485 00001329 50                      					push ax
   486 0000132A 51                      					push cx
   487 0000132B 56                      					push si
   488 0000132C 57                      					push di
   489 0000132D 53                      					push bx
   490                                  
   491 0000132E B800B8                  					mov ax, 0xb800
   492 00001331 8EC0                    					mov es, ax
   493 00001333 8B3E[AB0F]              					mov di, [RoadLineStart]	;Initializing offset
   494 00001337 81EFE001                					sub di, 480 ;We're putting the car 4 rows above the road
   495 0000133B 033E[AD0F]              					add di, [CarStart] ;Starting position of car
   496 0000133F 8B1E[AF0F]              					mov bx, [CarWidth]
   497 00001343 B020                    		CarRoof:	mov al, 0x20
   498 00001345 B440                    					mov ah, 0x40 ;White Color
   499 00001347 268905                  					mov word [es:di], ax
   500 0000134A 83C702                  					add di, 2
   501 0000134D 83EB01                  					sub bx, 1
   502 00001350 75F1                    					jnz CarRoof
   503                                  					
   504                                  					
   505                                  					;Car's 2nd Row
   506 00001352 8B3E[AB0F]              					mov di, [RoadLineStart]	;Initializing offset
   507 00001356 81EF4001                					sub di, 320 ;We're putting the car 3 rows above the road
   508 0000135A 033E[AD0F]              					add di, [CarStart]
   509 0000135E 8B1E[AF0F]              					mov bx, [CarWidth]
   510 00001362 83EB0A                  					sub bx, 10
   511 00001365 B020                    		CarSpace1:	mov al, 0x20
   512 00001367 B440                    					mov ah, 0x40 ;White Color
   513 00001369 268905                  					mov word [es:di], ax
   514 0000136C 83C702                  					add di, 2
   515 0000136F 83EB01                  					sub bx, 1
   516 00001372 75F1                    					jnz CarSpace1
   517 00001374 BB0600                  					mov bx, 6
   518 00001377 B020                    		CarWindow:	mov al, 0x20
   519 00001379 B4F0                    					mov ah, 0xF0 ;Black Color
   520 0000137B 268905                  					mov word [es:di], ax
   521 0000137E 83C702                  					add di, 2
   522 00001381 83EB01                  					sub bx, 1
   523 00001384 75F1                    					jnz CarWindow			
   524 00001386 8B1E[AF0F]              					mov bx, [CarWidth]
   525 0000138A 83EB0A                  					sub bx, 10
   526 0000138D B020                    		CarSpace2:	mov al, 0x20
   527 0000138F B440                    					mov ah, 0x40 ;White Color
   528 00001391 268905                  					mov word [es:di], ax
   529 00001394 83C702                  					add di, 2
   530 00001397 83EB01                  					sub bx, 1
   531 0000139A 75F1                    					jnz CarSpace2
   532 0000139C BE0200                  					mov si, 2
   533                                  					;Car's 3rd row
   534 0000139F 8B3E[AB0F]              					mov di, [RoadLineStart]
   535 000013A3 81EFA000                					sub di, 160
   536 000013A7 033E[AD0F]              					add di, [CarStart]
   537 000013AB 83EF08                  					sub di, 8 ;Starting this row 4 columns before the roof
   538 000013AE 8B1E[AF0F]              					mov bx, [CarWidth]
   539 000013B2 83C308                  					add bx, 8
   540 000013B5 B020                    	CarMainBody:	mov al, 0x20
   541 000013B7 B440                    					mov ah, 0x40 ;White Color
   542 000013B9 268905                  					mov word [es:di], ax
   543 000013BC 83C702                  					add di, 2
   544 000013BF 83EB01                  					sub bx, 1
   545 000013C2 75F1                    					jnz CarMainBody	
   546                                  					
   547                                  					;Car's 4th row
   548 000013C4 8B3E[AB0F]              					mov di, [RoadLineStart]
   549 000013C8 033E[AD0F]              					add di, [CarStart]
   550 000013CC 83EF08                  					sub di, 8
   551 000013CF 26C7052070              					mov word [es:di], 0x7020
   552 000013D4 83C702                  					add di,2 
   553 000013D7 26C7052070              					mov word [es:di], 0x7020
   554 000013DC 83C702                  					add di, 2
   555 000013DF BB0400                  					mov bx, 4
   556 000013E2 26C7052070              		CarSpace3:	mov word [es:di], 0x7020
   557 000013E7 83C702                  					add di,2
   558 000013EA 83EB01                  					sub bx, 1
   559 000013ED 75F3                    					jnz CarSpace3
   560                                  					
   561                                  				;Making the First Tire
   562 000013EF BE0300                  					mov si, 3
   563 000013F2 26C7052007              			Tire1:	mov word [es:di], 0x0720
   564 000013F7 83C702                  					add di, 2
   565 000013FA 83EE01                  					sub si, 1
   566 000013FD 75F3                    					jnz Tire1
   567                                  					
   568                                  					
   569 000013FF BB0400                  					mov bx, 4
   570 00001402 26C7052070              		CarSpace4:	mov word [es:di], 0x7020
   571 00001407 83C702                  					add di,2
   572 0000140A 83EB01                  					sub bx, 1
   573 0000140D 75F3                    					jnz CarSpace4
   574                                  					
   575                                  					
   576                                  					;Making the Second Tire
   577 0000140F BE0300                  					mov si, 3
   578 00001412 26C7052007              			Tire2:	mov word [es:di], 0x0720
   579 00001417 83C702                  					add di,2
   580 0000141A 83EE01                  					sub si, 1
   581 0000141D 75F3                    					jnz Tire2
   582                                  					
   583                                  					
   584 0000141F BB0200                  					mov bx, 2
   585 00001422 26C7052070              		CarSpace5:	mov word [es:di], 0x7020
   586 00001427 83C702                  					add di,2
   587 0000142A 83EB01                  					sub bx, 1
   588 0000142D 75F3                    					jnz CarSpace5
   589                                  					; mov word [es:di], 0x6020 ;Yellow headlight
   590                                  					; add di, 2
   591                                  					; mov word [es:di], 0x7020
   592                                  					; add di, 2
   593                                  					
   594                                  					;Car's 5th row
   595 0000142F 8B3E[AB0F]              					mov di, [RoadLineStart]
   596 00001433 81C7A000                					add di, 160
   597 00001437 033E[AD0F]              					add di, [CarStart]
   598 0000143B 83EF08                  					sub di, 8
   599 0000143E BB0600                  					mov bx, 6
   600 00001441 26C7052070              		CarSpace6:	mov word [es:di], 0x7020
   601 00001446 83C702                  					add di,2
   602 00001449 83EB01                  					sub bx, 1
   603 0000144C 75F3                    					jnz CarSpace6
   604                                  					
   605                                  					
   606                                  					; mov cx, 4
   607                                  		; TireBase1:	mov word [es:di], 0x875F ;Drawing the First Tire Base
   608                                  					; add di,2
   609                                  					; loop TireBase1					
   610                                  					
   611 0000144E BB0400                  					mov bx, 4
   612 00001451 26C7052070              		CarSpace7:	mov word [es:di], 0x7020
   613 00001456 83C702                  					add di,2
   614 00001459 83EB01                  					sub bx, 1
   615 0000145C 75F3                    					jnz CarSpace7
   616                                  					
   617                                  					; mov cx, 4
   618                                  		; TireBase2:	mov word [es:di], 0x875F ;Drawing the Second Tire Base
   619                                  					; add di,2
   620                                  					; loop TireBase2
   621                                  					
   622 0000145E BB0400                  					mov bx, 4
   623 00001461 26C7052070              		CarSpace8:	mov word [es:di], 0x7020
   624 00001466 83C702                  					add di,2
   625 00001469 83EB01                  					sub bx, 1
   626 0000146C 75F3                    					jnz CarSpace8
   627                                  					
   628                                  					
   629                                  					
   630                                  					
   631                                  		
   632 0000146E 5B                      			exitCar:pop bx
   633 0000146F 5F                      					pop di
   634 00001470 5E                      					pop si
   635 00001471 59                      					pop cx
   636 00001472 58                      					pop ax
   637 00001473 07                      					pop es
   638 00001474 5D                      					pop bp
   639 00001475 C3                      					ret
   640                                  	;-------------------------------------- ----------------------------------- ----------------------------------
   641                                  	;1st Part
   642                                  			
   643 00001476 55                      printBackground:	push bp
   644 00001477 89E5                    					mov bp, sp
   645 00001479 06                      					push es
   646 0000147A 50                      					push ax
   647 0000147B 51                      					push cx
   648 0000147C 56                      					push si
   649 0000147D 57                      					push di
   650 0000147E 53                      					push bx
   651                                  
   652 0000147F B800B8                  					mov ax, 0xb800
   653 00001482 8EC0                    					mov es, ax
   654 00001484 BF0000                  					mov di, 0	;Initializing offset
   655 00001487 B95000                  					mov cx, 80
   656 0000148A B020                    			l1:		mov al, ' '
   657 0000148C B410                    					mov ah, 0x10
   658 0000148E 268905                  					mov word [es:di], ax
   659 00001491 83C702                  					add di, 2
   660 00001494 E2F4                    					loop l1
   661                                  					
   662 00001496 B90800                  					mov cx, 8 ; for the Top half of the buildings
   663 00001499 BB0200                  		Roof:		mov bx, 2 ;2 spaces are to be input
   664 0000149C B020                    		SpaceLoop1:	mov al, ' '
   665 0000149E B410                    					mov ah, 0x10 ;Blue background, can be turned to black with 0x00
   666 000014A0 268905                  					mov word [es:di], ax
   667 000014A3 83C702                  					add di, 2
   668 000014A6 83EB01                  					sub bx, 1
   669 000014A9 83FB00                  					cmp bx, 0
   670 000014AC 75EE                    					jne SpaceLoop1
   671 000014AE BB0600                  					mov bx, 6 ;6 cells for the roof of each building
   672 000014B1 B02D                    		Ceiling:	mov al, '-'
   673 000014B3 B404                    					mov ah, 0x04 ;Red color because it's vibrant
   674 000014B5 268905                  					mov word [es:di], ax
   675 000014B8 83C702                  					add di, 2
   676 000014BB 83EB01                  					sub bx, 1
   677 000014BE 83FB00                  					cmp bx, 0
   678 000014C1 75EE                    					jne Ceiling
   679 000014C3 BB0200                  					mov bx, 2 ;2 spaces are to be input
   680 000014C6 B020                    		SpaceLoop2:	mov al, ' '
   681 000014C8 B410                    					mov ah, 0x10 ;Blue background, can be turned to black with 0x00
   682 000014CA 268905                  					mov word [es:di], ax
   683 000014CD 83C702                  					add di, 2
   684 000014D0 83EB01                  					sub bx, 1
   685 000014D3 83FB00                  					cmp bx, 0
   686 000014D6 75EE                    					jne SpaceLoop2
   687 000014D8 E2BF                    					loop Roof
   688                                  					
   689                                  					; ;Once Roof's done, we'll move to making the walls and floors
   690 000014DA 8B36[A50F]              					mov si, [BuildingWallRepition] ;Floors of buildings which can now be configurable
   691 000014DE B90800                  		FloorSize:	mov cx, 8
   692 000014E1 BB0200                  		Walls:		mov bx, 2 ;2 spaces are to be input
   693 000014E4 B020                    		SpaceLoop3:	mov al, ' '
   694 000014E6 B410                    					mov ah, 0x10 ;Blue background, can be turned to black with 0x00
   695 000014E8 268905                  					mov word [es:di], ax
   696 000014EB 83C702                  					add di, 2
   697 000014EE 83EB01                  					sub bx, 1
   698 000014F1 83FB00                  					cmp bx, 0
   699 000014F4 75EE                    					jne SpaceLoop3
   700 000014F6 B406                    					mov ah, 0x06
   701 000014F8 B07C                    					mov al, '|'
   702 000014FA 268905                  					mov word [es:di], ax ;Starting wall with orange
   703 000014FD 83C702                  					add di, 2
   704 00001500 BB0400                  					mov bx, 4 
   705 00001503 B05F                    		Floor:		mov al, '_'
   706 00001505 B405                    					mov ah, 0x05 ;Pink color because it matches the orange
   707 00001507 268905                  					mov word [es:di], ax
   708 0000150A 83C702                  					add di, 2
   709 0000150D 83EB01                  					sub bx, 1
   710 00001510 83FB00                  					cmp bx, 0
   711 00001513 75EE                    					jne Floor
   712 00001515 B406                    					mov ah, 0x06 
   713 00001517 B07C                    					mov al, '|'
   714 00001519 268905                  					mov word [es:di], ax ;Ending Wall
   715 0000151C 83C702                  					add di, 2
   716 0000151F BB0200                  					mov bx, 2 ;2 spaces are to be input
   717 00001522 B020                    		SpaceLoop4:	mov al, ' '
   718 00001524 B410                    					mov ah, 0x10 ;Blue background, can be turned to black with 0x00
   719 00001526 268905                  					mov word [es:di], ax
   720 00001529 83C702                  					add di, 2
   721 0000152C 83EB01                  					sub bx, 1
   722 0000152F 83FB00                  					cmp bx, 0
   723 00001532 75EE                    					jne SpaceLoop4
   724 00001534 E2AB                    					loop Walls
   725 00001536 83EE01                  					sub si, 1
   726 00001539 83FE00                  					cmp si, 0
   727 0000153C 75A0                    					jne FloorSize
   728                                  		
   729 0000153E 5B                      			exitBg:	pop bx
   730 0000153F 5F                      					pop di
   731 00001540 5E                      					pop si
   732 00001541 59                      					pop cx
   733 00001542 58                      					pop ax
   734 00001543 07                      					pop es
   735 00001544 5D                      					pop bp
   736 00001545 C3                      					ret
   737                                  					
   738                                  	;-------------------------------------- ----------------------------------- ----------------------------------
   739                                  	;2nd Part
   740                                  	
   741                                  	printroad:
   742 00001546 06                      		push es
   743 00001547 50                      		push ax
   744 00001548 53                      		push bx
   745 00001549 56                      		push si
   746 0000154A 57                      		push di
   747 0000154B 51                      		push cx
   748 0000154C 52                      		push dx
   749                                  		
   750                                  		
   751 0000154D B800B8                  		mov ax, 0xb800
   752 00001550 8EC0                    		mov es, ax
   753                                  		
   754 00001552 8B3E[A70F]              		mov di, [RoadStart]
   755                                  		road:
   756 00001556 26C70520F2              			mov word [es:di], 0xF220
   757 0000155B 83C702                  			add di, 2
   758 0000155E 3B3E[B50F]              			cmp di, [SkyStart]
   759 00001562 75F2                    			jne road
   760                                  			
   761 00001564 8B3E[A90F]              		mov di, [RoadLines]
   762                                  	
   763                                  	roadLoop:
   764 00001568 B02D                    		mov al, '-'
   765 0000156A B47E                    		mov ah, 0x7E ;Yellow color for road lines with grey bg
   766 0000156C B90600                  		mov cx, 6		
   767                                  
   768                                  		lines:
   769 0000156F 268905                  			mov word [es:di], ax
   770 00001572 83C702                  			add di, 2
   771 00001575 E2F8                    			loop lines
   772                                  		
   773 00001577 B020                    		mov al, ' '
   774 00001579 B4F2                    		mov ah, 0xF2
   775 0000157B B90600                  		mov cx, 6
   776                                  		
   777                                  		space:
   778 0000157E 268905                  			mov word [es:di], ax
   779 00001581 83C702                  			add di, 2
   780 00001584 E2F8                    			loop space	
   781                                  	
   782 00001586 83C301                  	add bx, 1	
   783 00001589 3B1E[B10F]              	cmp bx, [linesAmount]
   784 0000158D 75D9                    	jne roadLoop
   785                                  	
   786                                  
   787                                  	end:
   788 0000158F 5A                      		pop dx
   789 00001590 59                      		pop cx
   790 00001591 5F                      		pop di
   791 00001592 5E                      		pop si
   792 00001593 5B                      		pop bx
   793 00001594 58                      		pop ax
   794 00001595 07                      		pop es
   795 00001596 C3                      		ret
   796                                  		
   797                                  	;----------------------------------- -------------------------------------------
   798                                  	;3rd Part
   799                                  	
   800                                  	scrollup:	
   801 00001597 55                      			push bp
   802 00001598 89E5                    			mov bp,sp
   803 0000159A 50                      			push ax
   804 0000159B 51                      			push cx
   805 0000159C 56                      			push si
   806 0000159D 57                      			push di
   807 0000159E 06                      			push es
   808 0000159F 1E                      			push ds
   809                                  
   810 000015A0 B85000                  			mov ax, 80 ; load chars per row in ax
   811 000015A3 F66604                  			mul byte [bp+4] ; calculate source position
   812 000015A6 89C6                    			mov si, ax ; load source position in si
   813 000015A8 56                      			push si ; save position for later use
   814 000015A9 D1E6                    			shl si, 1 ; convert to byte offset
   815                                  
   816 000015AB B9D007                  			mov cx, 2000 ; number of screen locations
   817 000015AE 29C1                    			sub cx, ax ; count of words to move
   818                                  
   819 000015B0 B800B8                  			mov ax, 0xb800
   820 000015B3 8EC0                    			mov es, ax ; point es to video base
   821 000015B5 8ED8                    			mov ds, ax ; point ds to video base
   822                                  		
   823 000015B7 31FF                    			xor di, di ; point di to top left column
   824 000015B9 FC                      			cld ; set auto increment mode
   825 000015BA F3A5                    			rep movsw ; scroll up
   826                                  			;[es:di] = [ds:si]
   827                                  
   828 000015BC B82007                  			mov ax, 0x0720 ; space in normal attribute
   829 000015BF 59                      			pop cx ; count of positions to clear
   830 000015C0 F3AB                    			rep stosw ; clear the scrolled space
   831                                  		
   832 000015C2 1F                      			pop ds
   833 000015C3 07                      			pop es
   834 000015C4 5F                      			pop di
   835 000015C5 5E                      			pop si
   836 000015C6 59                      			pop cx
   837 000015C7 58                      			pop ax
   838 000015C8 5D                      			pop bp
   839 000015C9 C20200                  			ret 2
   840                                  
   841                                  
   842                                  scrolldown:	
   843 000015CC 55                      	push bp
   844 000015CD 89E5                    	mov bp, sp
   845                                  	
   846 000015CF 50                      	push ax
   847 000015D0 06                      	push es
   848 000015D1 1E                      	push ds
   849 000015D2 57                      	push di
   850 000015D3 56                      	push si
   851 000015D4 51                      	push cx
   852                                  
   853 000015D5 B800B8                  	mov ax, 0xb800
   854 000015D8 8EC0                    	mov es, ax
   855 000015DA 8ED8                    	mov ds, ax
   856                                  	
   857 000015DC 2E8B3E[EF0F]            	mov di, [cs:ScreenSize]
   858 000015E1 83EF02                  	sub di, 2
   859                                  	
   860 000015E4 89FE                    	mov si, di
   861 000015E6 2EA1[F10F]              	mov ax, [cs:ColumnSize]
   862 000015EA 01C0                    	add ax, ax
   863 000015EC F76604                  	mul word[bp + 4]
   864                                  	
   865 000015EF 29C6                    	sub si, ax
   866                                  	
   867 000015F1 2E8B0E[EF0F]            	mov cx, [cs:ScreenSize]
   868 000015F6 D1E9                    	shr cx, 1
   869                                  	
   870 000015F8 81E90005                	sub cx, 80 * 16
   871                                  
   872 000015FC D1E8                    	shr ax, 1
   873 000015FE 29C1                    	sub cx, ax
   874                                  	
   875 00001600 FD                      	std
   876 00001601 F3A5                    	rep movsw
   877                                  	
   878 00001603 89C1                    	mov cx, ax
   879 00001605 FD                      	std
   880 00001606 2EA1[E70F]              	mov ax, [cs:DaySkyColor]
   881 0000160A F3AB                    	rep stosw
   882                                  	
   883                                  		; call delay
   884                                  	
   885                                  	
   886 0000160C 59                      	pop cx
   887 0000160D 5E                      	pop si
   888 0000160E 5F                      	pop di
   889 0000160F 1F                      	pop ds
   890 00001610 07                      	pop es
   891 00001611 58                      	pop ax
   892                                  	
   893 00001612 5D                      	pop bp
   894 00001613 C20200                  	ret 2
   895                                  			
   896                                  removeOriginalRabbit:
   897 00001616 55                      	push bp
   898 00001617 89E5                    	mov bp, sp
   899                                  	
   900 00001619 06                      	push es
   901 0000161A 50                      	push ax
   902 0000161B 53                      	push bx
   903 0000161C 51                      	push cx
   904 0000161D 56                      	push si
   905 0000161E 57                      	push di
   906                                  	
   907                                  	;Checking if rabbit can jump
   908                                  	canJump:
   909 0000161F B800B8                  		mov ax, 0xb800
   910 00001622 8EC0                    		mov es, ax
   911 00001624 31F6                    		xor si, si
   912                                  		
   913                                  		;checking above rabbits head
   914 00001626 8B36[BB0F]              		mov si, [rabbithead]
   915 0000162A 89F7                    		mov di, si
   916 0000162C 81EFA000                		sub di, 160
   917                                  		
   918 00001630 57                      		push di
   919 00001631 E87903                  		call ScoreUpdateWrapper	
   920                                  		
   921 00001634 8B16[E70F]              		mov dx, [DaySkyColor]
   922 00001638 8B1E[D219]              		mov bx, [carrot]
   923                                  		
   924 0000163C 263915                  		cmp word [es:di], dx  ;check if above is sky(no brick)
   925 0000163F 7507                    		jne RemoveProcedure
   926                                  		
   927 00001641 C606[D10F]01            		mov byte[endCondition], 1
   928 00001646 EB50                    		jmp popRemove
   929                                  	
   930                                  	RemoveProcedure:
   931                                  	
   932 00001648 B800B8                  		mov ax, 0xb800
   933 0000164B 8EC0                    		mov es, ax
   934 0000164D 8B1E[E70F]              		mov bx, [DaySkyColor]
   935 00001651 8B3E[BB0F]              		mov di, [rabbithead]
   936 00001655 31C9                    		xor cx, cx
   937                                  		
   938                                  		;remove rabbit head
   939                                  		removeHead:
   940 00001657 26891D                  			mov word [es:di], bx
   941                                  			
   942 0000165A 83C702                  			add di, 2
   943 0000165D 83C101                  			add cx, 1
   944 00001660 83F902                  			cmp cx, 2
   945 00001663 75F2                    			jne removeHead
   946                                  
   947 00001665 31C9                    		xor cx, cx
   948 00001667 8B3E[B90F]              		mov di, [rabbitStart]
   949                                  		
   950                                  		;remove rabbit legs
   951                                  		removeLegs:
   952 0000166B 26891D                  			mov word [es:di], bx
   953                                  			
   954 0000166E 83C702                  			add di, 2
   955 00001671 83C101                  			add cx, 1
   956 00001674 83F905                  			cmp cx, 5
   957 00001677 75F2                    			jne removeLegs
   958                                  		
   959 00001679 E807FB                  		call HyperDelay
   960                                  		
   961 0000167C E82300                  		call addNewRabbit
   962 0000167F E801FB                  		call HyperDelay
   963 00001682 E8FEFA                  		call HyperDelay
   964                                  		
   965 00001685 6A03                    		push 3
   966 00001687 E842FF                  		call scrolldown
   967 0000168A E8C902                  		call spawnBricks
   968                                  		; call checkBlueBrick
   969 0000168D E8B301                  		call PrintCarrot
   970                                  		
   971 00001690 8B0E[E10F]              		mov cx, [ScoreToDisplay]
   972 00001694 51                      		push cx
   973 00001695 E8E601                  		call PrintScore
   974                                  		
   975                                  		
   976                                  		; call rabbitAndArea
   977                                  		
   978                                  	
   979                                  popRemove:
   980 00001698 5F                      	pop di
   981 00001699 5E                      	pop si
   982 0000169A 59                      	pop cx
   983 0000169B 5B                      	pop bx
   984 0000169C 58                      	pop ax
   985 0000169D 07                      	pop es
   986 0000169E 5D                      	pop bp
   987                                  	
   988 0000169F C20200                  	ret 2
   989                                  	
   990                                  	
   991                                  addNewRabbit:
   992 000016A2 06                      	push es
   993 000016A3 57                      	push di
   994 000016A4 56                      	push si
   995 000016A5 50                      	push ax
   996 000016A6 51                      	push cx
   997                                  	
   998 000016A7 8B3E[B90F]              	mov di, [rabbitStart]
   999 000016AB 81EFE001                	sub di, 480
  1000                                  	
  1001 000016AF B800B8                  	mov ax, 0xb800
  1002 000016B2 8EC0                    	mov es, ax
  1003                                  	
  1004                                  nextproc:
  1005 000016B4 B90500                  	mov cx, 5
  1006 000016B7 8A26[C10F]              	mov ah, [RabbitColor]
  1007 000016BB B020                    	mov al, ' '
  1008                                  	
  1009                                  	pR:
  1010 000016BD 268905                  		mov word [es:di], ax
  1011                                  		
  1012 000016C0 83C702                  		add di, 2
  1013 000016C3 E2F8                    		loop pR
  1014                                  	
  1015                                  
  1016                                  nextproc2:
  1017 000016C5 8B3E[BB0F]              	mov di, [rabbithead]
  1018 000016C9 81EFE001                	sub di, 480
  1019 000016CD B90200                  	mov cx, 2
  1020 000016D0 8A26[C20F]              	mov ah, byte [RabbitEyeColor]
  1021 000016D4 B02E                    	mov al, '.'
  1022                                  	
  1023                                  	pR2:
  1024 000016D6 268905                  		mov word [es:di], ax
  1025                                  		
  1026 000016D9 83C702                  		add di, 2
  1027 000016DC E2F8                    		loop pR2
  1028                                  	
  1029 000016DE 59                      	pop cx
  1030 000016DF 58                      	pop ax
  1031 000016E0 5E                      	pop si
  1032 000016E1 5F                      	pop di
  1033 000016E2 07                      	pop es
  1034                                  	
  1035 000016E3 C3                      	ret 
  1036                                  
  1037                                  
  1038                                  MoveRabbit:
  1039 000016E4 55                      	push bp
  1040 000016E5 89E5                    	mov bp, sp  ;bp + 4 = di postion
  1041                                  	
  1042 000016E7 FF7604                  	push word [bp + 4]
  1043 000016EA E829FF                  	call removeOriginalRabbit
  1044                                  	
  1045 000016ED 58                      	pop ax
  1046                                  	
  1047 000016EE C20200                  	ret 2
  1048                                  
  1049                                  					
  1050                                  	rabbitAndArea:
  1051 000016F1 55                      				push bp
  1052 000016F2 89E5                    				mov bp, sp
  1053                                  				
  1054 000016F4 06                      				push es
  1055 000016F5 50                      				push ax
  1056 000016F6 53                      				push bx
  1057 000016F7 57                      				push di
  1058 000016F8 56                      				push si
  1059 000016F9 52                      				push dx
  1060                                  	
  1061 000016FA B800B8                  				mov ax, 0xb800
  1062 000016FD 8EC0                    				mov es, ax
  1063 000016FF BF0000                  				mov di, 0	
  1064 00001702 BB00B8                  				mov bx, 0xb800
  1065 00001705 8EC3                    				mov es, bx
  1066 00001707 BF0000                  				mov di, 0
  1067                                  					
  1068 0000170A 8B3E[B50F]              				mov di, [SkyStart]
  1069                                  		
  1070 0000170E A1[E70F]                				mov ax, [DaySkyColor]   ;blue color for sky
  1071                                  				
  1072                                  		sky:
  1073 00001711 268905                  			mov word [es:di], ax
  1074                                  			
  1075 00001714 83C702                  			add di, 2
  1076 00001717 81FFA00F                			cmp di, 4000
  1077 0000171B 75F4                    			jne sky
  1078                                  
  1079                                  
  1080 0000171D B460                    				mov ah, 0x60  ;brown color
  1081 0000171F B020                    				mov al, ' ' 
  1082 00001721 B722                    				mov bh, 0x22  ;green color
  1083 00001723 B320                    				mov bl, ' '  ;wavy water wave pattern
  1084                                  				
  1085                                  				
  1086 00001725 8B1E[E10F]              		mov bx, [ScoreToDisplay]		;default score
  1087 00001729 53                      		push bx
  1088 0000172A E85101                  		call PrintScore		
  1089                                  	
  1090 0000172D E81301                  		call PrintCarrot
  1091                                  		
  1092                                  		; push 3682
  1093                                  		; call clouds
  1094                                  		
  1095                                  		; push 3810
  1096                                  		; call clouds
  1097                                  		
  1098                                  		
  1099 00001730 8B3E[BD0F]              		mov di, [GrassStart]
  1100                                  		
  1101                                  		; grass:
  1102                                  			; mov word [es:di], bx
  1103                                  
  1104                                  			; add di, 2
  1105                                  			; cmp di, 3680  ;run from GrassStart till its line end
  1106                                  			; jne grass
  1107                                  
  1108 00001734 B77F                    		mov bh, 0x7F
  1109 00001736 B320                    		mov bl, ' '
  1110                                  			
  1111 00001738 8B3E[B90F]              		mov di, [rabbitStart]
  1112                                  		rabbit1:
  1113 0000173C 26891D                  			mov word [es:di], bx
  1114                                  			
  1115 0000173F 83C702                  			add di, 2
  1116 00001742 81FF7A0D                			cmp di, 3450
  1117 00001746 75F4                    			jne rabbit1
  1118                                  			
  1119 00001748 B7FF                    		mov bh, 0xFF
  1120 0000174A B32E                    		mov bl, '.'
  1121 0000174C 8B3E[B90F]              		mov di, [rabbitStart]
  1122 00001750 81EF9E00                		sub di, 158
  1123                                  		rabbit2:
  1124 00001754 26891D                  			mov word [es:di], bx
  1125                                  			
  1126 00001757 83C702                  			add di, 2
  1127 0000175A 81FFD60C                			cmp di, 3286
  1128 0000175E 75F4                    			jne rabbit2
  1129                                  			
  1130 00001760 8B3E[B90F]              		mov di, [rabbitStart]
  1131 00001764 81EF3E01                		sub di, 318
  1132                                  
  1133 00001768 BF600E                  		mov di, 3680
  1134                                  		; sand:
  1135                                  			; mov word [es:di], ax
  1136                                  			
  1137                                  			; add di, 2
  1138                                  			; cmp di, 4000
  1139                                  			; jne sand	
  1140                                  		
  1141 0000176B 8B16[E30F]              		mov dx, [RNG]
  1142                                  		; call spawnBricks
  1143                                  		; jmp WrapperPop
  1144                                  		
  1145                                  		; cmp dx, 0
  1146                                  		; je DefaultBrickPattern
  1147                                  		
  1148                                  		; cmp dx, 1
  1149                                  		; je InvertedBrickPattern
  1150                                  		
  1151                                  		; cmp dx, 2
  1152                                  		; je BreakBrickPattern
  1153                                  		
  1154                                  		; cmp dx, 3
  1155                                  		; je BreakBrickInvertedPattern
  1156                                  		
  1157                                  		; jmp ChangeBrickColor
  1158                                  		
  1159                                  		; DefaultBrickPattern:
  1160                                  			; mov cx, [tickcount]
  1161                                  			; xor ax, ax
  1162                                  			
  1163                                  			; cmp cx, 4
  1164                                  			; jle assignAXDef
  1165                                  			
  1166                                  			; cmp cx, 7
  1167                                  			; jge assignAXInv
  1168                                  			
  1169                                  			; jmp assignAXSpec
  1170                                  			
  1171                                  ; brickShit:			
  1172                                  			; push bx
  1173                                  			; call PrintTopBrick	
  1174                                  		
  1175                                  			; push ax
  1176                                  			; call PrintMovingBrick
  1177                                  				
  1178                                  			; push ax
  1179                                  			; call PrintBottomBrick
  1180                                  			
  1181                                  			; jmp RNGAssign
  1182                                  			
  1183                                  			; assignAXDef:
  1184                                  				; mov ax, 0xEE20
  1185                                  				; mov bx, 0x4020
  1186                                  				; jmp brickShit
  1187                                  				
  1188                                  			; assignAXInv:
  1189                                  				; mov ax, 0x4020
  1190                                  				; mov bx, 0xEE20
  1191                                  				; jmp brickShit
  1192                                  				
  1193                                  			; assignAXSpec:
  1194                                  				; mov ax, 0xEE20
  1195                                  				; mov bx, 0x2F20
  1196                                  				; jmp brickShit
  1197                                  
  1198                                  ; RNGAssign:
  1199                                  			; mov word [RNG], 1
  1200                                  			
  1201                                  			; jmp WrapperPop
  1202                                  			
  1203                                  		
  1204                                  ; InvertedBrickPattern:
  1205                                  			; mov cx, [tickcount]
  1206                                  			; xor ax, ax
  1207                                  			
  1208                                  			; cmp cx, 4
  1209                                  			; jle assignAXDef2
  1210                                  			
  1211                                  			; cmp cx, 7
  1212                                  			; jge assignAXInv2
  1213                                  			
  1214                                  			; jmp assignAXSpec2
  1215                                  			
  1216                                  ; brickShit2:
  1217                                  			; push bx
  1218                                  			; call PrintTopBrick	
  1219                                  		
  1220                                  			; push ax
  1221                                  			; call PrintMovingBrick
  1222                                  				
  1223                                  			; push ax
  1224                                  			; call PrintBottomBrick
  1225                                  			
  1226                                  			; jmp RNGAssignZero
  1227                                  			
  1228                                  			; assignAXDef2:
  1229                                  				; mov ax, 0xEE20
  1230                                  				; mov bx, 0x4020
  1231                                  				; jmp brickShit2
  1232                                  				
  1233                                  			; assignAXInv2:
  1234                                  				; mov ax, 0x4020
  1235                                  				; mov bx, 0xEE20
  1236                                  				; jmp brickShit2
  1237                                  				
  1238                                  			; assignAXSpec2:
  1239                                  				; mov ax, 0xEE20
  1240                                  				; mov bx, 0x2F20
  1241                                  				; jmp brickShit2
  1242                                  			
  1243                                  		
  1244                                  			; cmp word [tickcount], 2
  1245                                  			; jle DefaultBrickPattern
  1246                                  			
  1247                                  			; cmp word [tickcount], 5
  1248                                  			; jle InvertedBrickPattern
  1249                                  			
  1250                                  			; cmp word [tickcount], 7
  1251                                  			; jle DefaultBrickPattern2
  1252                                  			
  1253                                  			; cmp word [tickcount], 9
  1254                                  			; jle InvertedBrickPattern2
  1255                                  			
  1256                                  			
  1257                                  	DefaultBrickPattern:
  1258                                  		
  1259 0000176F 68202F                  		push GREEN_COLOR
  1260 00001772 E86300                  		call PrintTopBrick	
  1261                                  		
  1262 00001775 6820EE                  		push ORANGE_COLOR
  1263 00001778 E82900                  		call PrintMovingBrick
  1264                                  		
  1265 0000177B 682040                  		push RED_COLOR
  1266 0000177E E88B00                  		call PrintBottomBrick
  1267                                  		
  1268 00001781 C706[E30F]0100          		mov word [RNG], 1
  1269                                  	
  1270                                  
  1271                                  	InvertedBrickPattern:
  1272 00001787 6820EE                  		push ORANGE_COLOR
  1273 0000178A E84B00                  		call PrintTopBrick
  1274                                  		
  1275 0000178D 682040                  		push RED_COLOR
  1276 00001790 E81100                  		call PrintMovingBrick
  1277                                  		
  1278 00001793 68202F                  		push GREEN_COLOR
  1279 00001796 E87300                  		call PrintBottomBrick
  1280                                  
  1281 00001799 C706[E30F]0000          		mov word [RNG], 0
  1282                                  
  1283 0000179F EB00                    			jmp WrapperPop
  1284                                  			
  1285                                  			
  1286                                  		; BreakBrickPattern:
  1287                                  			; push 0x2F20
  1288                                  			; call PrintTopBrick
  1289                                  			
  1290                                  			; push 0xEE20
  1291                                  			; call PrintMovingBrick
  1292                                  			
  1293                                  			; push 0x4020
  1294                                  			; call PrintBottomBrick
  1295                                  			
  1296                                  			; mov word [RNG], 3
  1297                                  			
  1298                                  			; jmp WrapperPop		
  1299                                  			
  1300                                  			
  1301                                  		; BreakBrickInvertedPattern:
  1302                                  			; push 0x2F20
  1303                                  			; call PrintTopBrick
  1304                                  			
  1305                                  			; push 0xEE20
  1306                                  			; call PrintMovingBrick
  1307                                  			
  1308                                  			; push 0x4020
  1309                                  			; call PrintBottomBrick
  1310                                  			
  1311                                  			; mov word [RNG], 2
  1312                                  			
  1313                                  			; jmp WrapperPop
  1314                                  			
  1315                                  			
  1316                                  		; ChangeBrickColor:
  1317                                  			; ; Change the color of the bricks based on the current color
  1318                                  			; cmp word [currentColor], GREEN_COLOR
  1319                                  			; je  SetNextColorRed
  1320                                  			; cmp word [currentColor], RED_COLOR
  1321                                  			; je  SetNextColorOrange
  1322                                  			; cmp word [currentColor], ORANGE_COLOR
  1323                                  			; je  SetNextColorGreen
  1324                                  
  1325                                  		; SetNextColorRed:
  1326                                  			; mov word [currentColor], RED_COLOR
  1327                                  			; jmp WrapperPop
  1328                                  
  1329                                  		; SetNextColorOrange:
  1330                                  			; mov word [currentColor], ORANGE_COLOR
  1331                                  			; jmp WrapperPop
  1332                                  
  1333                                  		; SetNextColorGreen:
  1334                                  			; mov word [currentColor], GREEN_COLOR
  1335                                  			; jmp WrapperPop
  1336                                  		
  1337                                  		
  1338                                  		WrapperPop:
  1339 000017A1 E99700                  			jmp Pop3rdSegment
  1340                                  
  1341                                  ; CHANGERNG3:
  1342                                  	; mov word [RNG], 3
  1343                                  	
  1344                                  	; jmp WrapperPop
  1345                                  	
  1346                                  ; CHANGERNG2:
  1347                                  	; mov word [RNG], 2
  1348                                  	
  1349                                  	; jmp WrapperPop
  1350                                  	
  1351                                  
  1352                                  PrintMovingBrick:
  1353 000017A4 55                      	push bp
  1354 000017A5 89E5                    	mov bp, sp
  1355                                  	
  1356 000017A7 57                      	push di
  1357 000017A8 50                      	push ax
  1358 000017A9 52                      	push dx
  1359 000017AA 53                      	push bx
  1360                                  	
  1361 000017AB 8B3E[B90F]              	mov di, [rabbitStart]
  1362 000017AF 81EF4001                	sub di, 320
  1363 000017B3 8B0E[CF0F]              	mov cx, [tickcount]
  1364 000017B7 01C9                    	add cx, cx
  1365 000017B9 29CF                    	sub di, cx ;26
  1366 000017BB 8B4604                  	mov ax, [bp + 4]
  1367 000017BE 31DB                    	xor bx, bx
  1368 000017C0 31D2                    	xor dx, dx
  1369                                  
  1370                                  	loopbrick3:
  1371 000017C2 268905                  		mov word [es:di], ax
  1372                                  		
  1373 000017C5 83C702                  		add di, 2
  1374 000017C8 83C301                  		add bx, 1
  1375 000017CB 83FB10                  		cmp bx, 16
  1376 000017CE 75F2                    		jne loopbrick3
  1377                                  	
  1378 000017D0 5B                      	pop bx
  1379 000017D1 5A                      	pop dx
  1380 000017D2 58                      	pop ax
  1381 000017D3 5F                      	pop di
  1382 000017D4 5D                      	pop bp
  1383                                  	
  1384 000017D5 C20200                  	ret 2
  1385                                  	
  1386                                  
  1387                                  PrintTopBrick:
  1388 000017D8 55                      	push bp
  1389 000017D9 89E5                    	mov bp, sp
  1390                                  	
  1391 000017DB 57                      	push di
  1392 000017DC 50                      	push ax
  1393 000017DD 52                      	push dx
  1394 000017DE 53                      	push bx
  1395 000017DF 51                      	push cx
  1396                                  	
  1397 000017E0 31DB                    	xor bx, bx
  1398 000017E2 8B4604                  	mov ax, [bp + 4]   ;brick color
  1399 000017E5 8B3E[BB0F]              	mov di, [rabbithead]
  1400 000017E9 81EF8002                	sub di, 640
  1401 000017ED 8B0E[CF0F]              	mov cx, [tickcount]
  1402 000017F1 01C9                    	add cx, cx
  1403 000017F3 29CF                    	sub di, cx ;26
  1404                                  
  1405                                  	loopbrick4:
  1406 000017F5 268905                  		mov word [es:di], ax
  1407                                  		
  1408 000017F8 83C702                  		add di, 2
  1409 000017FB 83C301                  		add bx, 1
  1410 000017FE 83FB10                  		cmp bx, 16
  1411 00001801 75F2                    		jne loopbrick4
  1412                                  	
  1413 00001803 59                      	pop cx
  1414 00001804 5B                      	pop bx
  1415 00001805 5A                      	pop dx
  1416 00001806 58                      	pop ax
  1417 00001807 5F                      	pop di
  1418 00001808 5D                      	pop bp
  1419                                  	
  1420 00001809 C20200                  	ret 2
  1421                                  	
  1422                                  	
  1423                                  PrintBottomBrick:
  1424 0000180C 55                      	push bp
  1425 0000180D 89E5                    	mov bp, sp
  1426                                  	
  1427 0000180F 57                      	push di
  1428 00001810 50                      	push ax
  1429 00001811 52                      	push dx
  1430 00001812 53                      	push bx
  1431                                  	
  1432 00001813 8B3E[B90F]              	mov di, [rabbitStart]
  1433 00001817 81C7A000                	add di, 160
  1434 0000181B 83EF10                  	sub di, 16
  1435 0000181E 8B4604                  	mov ax, [bp + 4]
  1436 00001821 31DB                    	xor bx, bx
  1437 00001823 31D2                    	xor dx, dx
  1438                                  
  1439                                  	loopbrick5:
  1440 00001825 268905                  		mov word [es:di], ax
  1441                                  		
  1442 00001828 83C702                  		add di, 2
  1443 0000182B 83C301                  		add bx, 1
  1444 0000182E 83FB10                  		cmp bx, 16
  1445 00001831 75F2                    		jne loopbrick5
  1446                                  	
  1447 00001833 5B                      	pop bx
  1448 00001834 5A                      	pop dx
  1449 00001835 58                      	pop ax
  1450 00001836 5F                      	pop di
  1451 00001837 5D                      	pop bp
  1452                                  	
  1453 00001838 C20200                  	ret 2
  1454                                  	
  1455                                  	
  1456                                  	Pop3rdSegment:
  1457 0000183B 5A                      		pop dx
  1458 0000183C 5E                      		pop si
  1459 0000183D 5F                      		pop di
  1460 0000183E 5B                      		pop bx
  1461 0000183F 58                      		pop ax
  1462 00001840 07                      		pop es
  1463 00001841 5D                      		pop bp
  1464                                  		
  1465 00001842 C3                      		ret
  1466                                  		
  1467                                  
  1468                                  PrintCarrot:
  1469 00001843 55                      	push bp
  1470 00001844 89E5                    	mov bp, sp
  1471                                  	
  1472 00001846 06                      	push es 
  1473 00001847 52                      	push dx
  1474 00001848 56                      	push si
  1475 00001849 57                      	push di
  1476 0000184A 50                      	push ax
  1477                                  	
  1478 0000184B 31D2                    	xor dx, dx
  1479 0000184D 8B16[CF0F]              	mov dx, [tickcount]
  1480 00001851 83FA05                  	cmp dx, 5
  1481 00001854 7E21                    	jle carrotEnd
  1482                                  	
  1483 00001856 31FF                    	xor di, di
  1484 00001858 8B3E[BB0F]              	mov di, [rabbithead]
  1485 0000185C 81EFE001                	sub di, 480
  1486                                  	
  1487 00001860 B800B8                  	mov ax, 0xb800
  1488 00001863 8EC0                    	mov es, ax
  1489                                  	
  1490                                  	Leaf:
  1491 00001865 B492                    		mov ah, 0x92
  1492 00001867 B02A                    		mov al, '*'
  1493                                  		
  1494                                  		;1001 0010
  1495                                  	
  1496 00001869 268905                  		mov word [es:di], ax
  1497                                  	
  1498                                  	Body:
  1499 0000186C 81C7A000                		add di, 160
  1500 00001870 B496                    		mov ah, 0x96
  1501 00001872 B021                    		mov al, 0x21
  1502                                  		
  1503                                  		;1001 0110
  1504                                  		
  1505 00001874 268905                  		mov word [es:di], ax
  1506                                  		
  1507                                  carrotEnd:	
  1508 00001877 58                      	pop ax
  1509 00001878 5F                      	pop di
  1510 00001879 5E                      	pop si
  1511 0000187A 5A                      	pop dx
  1512 0000187B 07                      	pop es
  1513 0000187C 5D                      	pop bp
  1514                                  	
  1515 0000187D C3                      	ret 
  1516                                  
  1517                                  			
  1518                                  PrintScore:
  1519 0000187E 55                      	push bp
  1520 0000187F 89E5                    	mov bp, sp
  1521                                  	
  1522 00001881 57                      	push di
  1523 00001882 52                      	push dx
  1524 00001883 06                      	push es
  1525 00001884 56                      	push si
  1526 00001885 51                      	push cx
  1527 00001886 50                      	push ax
  1528                                  	
  1529 00001887 8B3E[B50F]              	mov di, [SkyStart]
  1530                                  	
  1531 0000188B BA00B8                  	mov dx, 0xb800
  1532 0000188E 8EC2                    	mov es, dx
  1533                                  
  1534 00001890 BE[D70F]                	mov si, Score
  1535 00001893 8B0E[DF0F]              	mov cx, [ScoreLength]
  1536                                  	
  1537 00001897 B410                    	mov ah, 0x10
  1538                                  	nextchar:
  1539 00001899 8A04                    		mov al, byte[si]
  1540                                  		
  1541 0000189B 268905                  		mov word[es:di], ax
  1542 0000189E 83C702                  		add di, 2
  1543 000018A1 83C601                  		add si, 1
  1544                                  		
  1545 000018A4 E2F3                    		loop nextchar
  1546                                  		
  1547                                  	
  1548 000018A6 A1[B50F]                	mov ax, [SkyStart]
  1549 000018A9 83C00E                  	add ax, 14
  1550 000018AC 50                      	push ax   ;pos
  1551 000018AD 8B4604                  	mov ax, [bp + 4]
  1552 000018B0 50                      	push ax   ;number
  1553 000018B1 E8E203                  	call printnum2
  1554                                  	
  1555                                  
  1556 000018B4 58                      	pop ax
  1557 000018B5 59                      	pop cx
  1558 000018B6 5E                      	pop si
  1559 000018B7 07                      	pop es
  1560 000018B8 5A                      	pop dx
  1561 000018B9 5F                      	pop di
  1562 000018BA 5D                      	pop bp
  1563                                  	
  1564 000018BB C20200                  	ret 2
  1565                                  
  1566                                  
  1567                                  clouds:
  1568 000018BE 55                      	push bp
  1569 000018BF 89E5                    	mov bp, sp
  1570                                  	
  1571 000018C1 60                      	pusha
  1572                                  
  1573 000018C2 8B7E04                  	mov di, [bp + 4]
  1574 000018C5 B90E00                  	mov cx, 14
  1575                                  	clouds1:
  1576 000018C8 B820FF                  		mov ax, 0xFF20
  1577 000018CB 268905                  		mov word [es:di], ax
  1578                                  		
  1579 000018CE 83C702                  		add di, 2
  1580 000018D1 E2F5                    		loop clouds1
  1581                                  	
  1582 000018D3 81EFA000                	sub di, 160
  1583 000018D7 83EF16                  	sub di, 22
  1584 000018DA B90800                  	mov cx, 8
  1585                                  	clouds2:
  1586 000018DD B820FF                  		mov ax, 0xFF20
  1587 000018E0 268905                  		mov word [es:di], ax
  1588                                  		
  1589 000018E3 83C702                  		add di, 2
  1590 000018E6 E2F5                    		loop clouds2
  1591                                  		
  1592 000018E8 81EFA000                	sub di, 160
  1593 000018EC 83EF0C                  	sub di, 12
  1594 000018EF B90400                  	mov cx, 4
  1595                                  	clouds3:
  1596 000018F2 B820FF                  		mov ax, 0xFF20
  1597 000018F5 268905                  		mov word [es:di], ax
  1598                                  		
  1599 000018F8 83C702                  		add di, 2
  1600 000018FB E2F5                    		loop clouds3
  1601                                  		
  1602 000018FD 61                      	popa
  1603                                  	
  1604 000018FE 5D                      	pop bp
  1605 000018FF C20200                  	ret 2
  1606                                  	
  1607                                  
  1608                                  topBrickOrange:
  1609 00001902 6820EE                  	push ORANGE_COLOR
  1610 00001905 E8D0FE                  	call PrintTopBrick
  1611 00001908 C3                      	ret
  1612                                  	
  1613                                  topBrickRed:
  1614 00001909 682040                  	push RED_COLOR
  1615 0000190C E8C9FE                  	call PrintTopBrick	
  1616 0000190F C3                      	ret
  1617                                  	
  1618                                  topBrickGreen:
  1619 00001910 68202F                  	push GREEN_COLOR
  1620 00001913 E8C2FE                  	call PrintTopBrick
  1621 00001916 C3                      	ret
  1622                                  	
  1623                                  topBrickCyan:
  1624 00001917 682033                  	push CYAN_COLOR
  1625 0000191A E8BBFE                  	call PrintTopBrick
  1626 0000191D C3                      	ret
  1627                                  	
  1628                                  	
  1629                                  MidBrickOrange:
  1630 0000191E 6820EE                  	push ORANGE_COLOR
  1631 00001921 E880FE                  	call PrintMovingBrick
  1632 00001924 C3                      	ret
  1633                                  	
  1634                                  MidBrickRed:
  1635 00001925 682040                  	push RED_COLOR
  1636 00001928 E879FE                  	call PrintMovingBrick
  1637 0000192B C3                      	ret
  1638                                  	
  1639                                  MidBrickGreen:
  1640 0000192C 68202F                  	push GREEN_COLOR
  1641 0000192F E872FE                  	call PrintMovingBrick
  1642 00001932 C3                      	ret
  1643                                  	
  1644                                  MidBrickCyan:
  1645 00001933 682033                  	push CYAN_COLOR
  1646 00001936 E86BFE                  	call PrintMovingBrick
  1647 00001939 C3                      	ret
  1648                                  	
  1649                                  	
  1650                                  BottomBrickOrange:
  1651 0000193A 6820EE                  	push ORANGE_COLOR
  1652 0000193D E8CCFE                  	call PrintBottomBrick
  1653 00001940 C3                      	ret
  1654                                  	
  1655                                  BottomBrickRed:
  1656 00001941 682040                  	push RED_COLOR
  1657 00001944 E8C5FE                  	call PrintBottomBrick
  1658 00001947 C3                      	ret
  1659                                  	
  1660                                  BottomBrickGreen:
  1661 00001948 68202F                  	push GREEN_COLOR
  1662 0000194B E8BEFE                  	call PrintBottomBrick
  1663 0000194E C3                      	ret
  1664                                  	
  1665                                  BottomBrickCyan:
  1666 0000194F 682033                  	push CYAN_COLOR
  1667 00001952 E8B7FE                  	call PrintBottomBrick
  1668 00001955 C3                      	ret
  1669                                  	
  1670                                  spawnBricks:
  1671 00001956 803E[CF0F]03            	cmp byte [tickcount], 3
  1672 0000195B 7EBA                    	jle topBrickCyan
  1673                                  	
  1674 0000195D 803E[CF0F]05            	cmp byte [tickcount], 5
  1675 00001962 7EA5                    	jle topBrickRed
  1676                                  	
  1677 00001964 803E[CF0F]07            	cmp byte [tickcount], 7
  1678 00001969 7EA5                    	jle topBrickGreen
  1679                                  	
  1680 0000196B 803E[CF0F]08            	cmp byte [tickcount], 8
  1681 00001970 7D90                    	jge topBrickOrange
  1682                                  	
  1683 00001972 C3                      	ret
  1684                                  	
  1685                                  spawnMiddleBricks:
  1686 00001973 803E[CF0F]03            	cmp byte [tickcount], 3
  1687 00001978 7EA4                    	jle MidBrickOrange
  1688                                  	
  1689 0000197A 803E[CF0F]05            	cmp byte [tickcount], 5
  1690 0000197F 7EA4                    	jle MidBrickRed
  1691                                  	
  1692 00001981 803E[CF0F]07            	cmp byte [tickcount], 7
  1693 00001986 7EA4                    	jle MidBrickGreen
  1694                                  	
  1695 00001988 803E[CF0F]08            	cmp byte [tickcount], 8
  1696 0000198D 7DA4                    	jge MidBrickCyan
  1697                                  	
  1698 0000198F C3                      	ret
  1699                                  	
  1700                                  spawnBottomBricks:
  1701 00001990 803E[CF0F]03            	cmp byte [tickcount], 3
  1702 00001995 7EA3                    	jle BottomBrickOrange
  1703                                  	
  1704 00001997 803E[CF0F]05            	cmp byte [tickcount], 5
  1705 0000199C 7EA3                    	jle BottomBrickRed
  1706                                  	
  1707 0000199E 803E[CF0F]07            	cmp byte [tickcount], 7
  1708 000019A3 7EA3                    	jle BottomBrickGreen
  1709                                  	
  1710 000019A5 803E[CF0F]08            	cmp byte [tickcount], 8
  1711 000019AA 7DA3                    	jge BottomBrickCyan
  1712                                  	
  1713 000019AC C3                      	ret	
  1714                                  	
  1715                                  ; DefaultBrickPatternWrapper:
  1716                                  	; DefaultBrickPattern:
  1717                                  		
  1718                                  		; push GREEN_COLOR
  1719                                  		; call PrintTopBrick	
  1720                                  		
  1721                                  		; push ORANGE_COLOR
  1722                                  		; call PrintMovingBrick
  1723                                  		
  1724                                  		; push RED_COLOR
  1725                                  		; call PrintBottomBrick
  1726                                  		
  1727                                  		; mov word [RNG], 1
  1728                                  		
  1729                                  		; ret
  1730                                  	
  1731                                  	; jmp WrapperPop
  1732                                  
  1733                                  ; InvertedBrickPatternWrapper:
  1734                                  	; InvertedBrickPattern:
  1735                                  		; push ORANGE_COLOR
  1736                                  		; call PrintTopBrick
  1737                                  		
  1738                                  		; push RED_COLOR
  1739                                  		; call PrintMovingBrick
  1740                                  		
  1741                                  		; push CYAN_COLOR
  1742                                  		; call PrintBottomBrick
  1743                                  
  1744                                  		; mov word [RNG], 0
  1745                                  		
  1746                                  		; ret
  1747                                  		
  1748                                  	; jmp WrapperPop
  1749                                  
  1750                                  ; DefaultBrickPattern2Wrapper:
  1751                                  	; DefaultBrickPattern2:
  1752                                  		
  1753                                  		; push RED_COLOR
  1754                                  		; call PrintTopBrick	
  1755                                  		
  1756                                  		; push ORANGE_COLOR
  1757                                  		; call PrintMovingBrick
  1758                                  		
  1759                                  		; push GREEN_COLOR
  1760                                  		; call PrintBottomBrick
  1761                                  		
  1762                                  		; mov word [RNG], 1
  1763                                  		
  1764                                  		; ret
  1765                                  	
  1766                                  	; jmp WrapperPop
  1767                                  
  1768                                  ; InvertedBrickPattern2Wrapper:
  1769                                  	; InvertedBrickPattern2:
  1770                                  		; push ORANGE_COLOR
  1771                                  		; call PrintTopBrick
  1772                                  		
  1773                                  		; push GREEN_COLOR
  1774                                  		; call PrintMovingBrick
  1775                                  		
  1776                                  		; push CYAN_COLOR
  1777                                  		; call PrintBottomBrick
  1778                                  
  1779                                  		; mov word [RNG], 0
  1780                                  		
  1781                                  		; ret
  1782                                  	
  1783                                  	; jmp WrapperPop
  1784                                  
  1785                                  	
  1786                                  ScoreUpdateWrapper:	
  1787                                  	UpdateScore:
  1788 000019AD 55                      		push bp
  1789 000019AE 89E5                    		mov bp, sp
  1790 000019B0 60                      		pusha
  1791                                  		
  1792 000019B1 8B7E04                  		mov di, [bp + 4]
  1793 000019B4 81EFA000                		sub di, 160
  1794 000019B8 8B1E[D219]              		mov bx, [carrot]
  1795                                  		
  1796 000019BC 26391D                  		cmp word [es:di], bx
  1797 000019BF 750C                    		jne exitScore
  1798                                  		
  1799 000019C1 A1[E10F]                		mov ax, [ScoreToDisplay]
  1800 000019C4 83C00A                  		add ax, 10
  1801 000019C7 A3[E10F]                		mov [ScoreToDisplay], ax
  1802 000019CA E84703                  		call sound
  1803                                  	exitScore:
  1804 000019CD 61                      		popa
  1805 000019CE 5D                      		pop bp
  1806 000019CF C20200                  		ret 2
  1807                                  	
  1808 000019D2 2196                    carrot: dw 0x9621
  1809                                  
  1810                                  AssignBunnyWhite:
  1811 000019D4 B77F                    	mov bh, 0x7F
  1812 000019D6 C606[C10F]7F            	mov byte [RabbitColor], 0x7F
  1813 000019DB C606[C20F]FF            	mov byte [RabbitEyeColor], 0xFF
  1814                                  	
  1815 000019E0 EB4E                    	jmp proceed
  1816                                  
  1817                                  assignBunnyYellow:
  1818 000019E2 B760                    	mov bh, 0x60
  1819 000019E4 C606[C10F]60            	mov byte [RabbitColor], 0x60
  1820 000019E9 C606[C20F]EF            	mov byte [RabbitEyeColor], 0xEF
  1821                                  	
  1822 000019EE EB40                    	jmp proceed
  1823                                  
  1824                                  print333:
  1825 000019F0 689C0F                  	push 3996
  1826 000019F3 8B16[D20F]              	mov dx, [BlueBrickCount]
  1827 000019F7 52                      	push dx
  1828 000019F8 E89B02                  	call printnum2
  1829                                  	
  1830 000019FB C3                      	ret
  1831                                  		
  1832                                  KeyboardInterrupt:
  1833 000019FC 50                      	push ax
  1834 000019FD 06                      	push es
  1835 000019FE 57                      	push di
  1836 000019FF 52                      	push dx
  1837 00001A00 1E                      	push ds
  1838                                  	
  1839 00001A01 0E                      	push cs
  1840 00001A02 1F                      	pop ds
  1841                                  
  1842                                  	; cmp byte[endCondition], 0x01
  1843                                  	; je KeyboardInterrupt_Exit
  1844                                  
  1845 00001A03 B800B8                  	mov ax, 0xB800
  1846 00001A06 8EC0                    	mov es, ax
  1847                                  
  1848 00001A08 E460                    	in al, 0x60
  1849                                  	
  1850 00001A0A 3C01                    	cmp byte al, 1
  1851 00001A0C 743A                    	je KeyboardInterrupt_Exit
  1852                                  	
  1853                                  	nnextcmp:
  1854 00001A0E 3C81                    	cmp byte al, 10000001b ;esc key up
  1855 00001A10 7511                    	jne nextcmp
  1856                                  
  1857                                  	badscene:
  1858 00001A12 803E[D60F]01            	cmp byte[BusyMode], 0x01 ; if in busy (pause) mode
  1859 00001A17 7405                    	je RIPGame
  1860                                  	
  1861 00001A19 E80602                  	call ConfirmationScreen
  1862                                  
  1863 00001A1C EB2A                    	jmp KeyboardInterrupt_Exit
  1864                                  	RIPGame:
  1865 00001A1E E8C301                  		call EndScreen
  1866 00001A21 EB25                    		jmp KeyboardInterrupt_Exit
  1867                                  
  1868                                  nextcmp:
  1869 00001A23 3A06[C30F]              	cmp byte al, [JumpKey]
  1870 00001A27 7510                    	jne KeyboardInterrupt_NoMatch
  1871                                  	
  1872                                  MovingRabbit:
  1873 00001A29 833E[E10F]0A            	cmp word [ScoreToDisplay], 10
  1874 00001A2E 7DB2                    	jge assignBunnyYellow
  1875                                  	
  1876                                  	; cmp word [ScoreToDisplay], 10
  1877                                  	; jl AssignBunnyWhite
  1878                                  	
  1879                                  proceed:
  1880 00001A30 FF36[C10F]              	push word [RabbitColor]
  1881 00001A34 E8ADFC                  	call MoveRabbit
  1882                                  	
  1883 00001A37 EB0F                    	jmp KeyboardInterrupt_Exit
  1884                                  	
  1885                                  	KeyboardInterrupt_NoMatch:
  1886 00001A39 803E[D60F]01            		cmp byte[BusyMode], 0x01
  1887 00001A3E 7508                    		jne KeyboardInterrupt_Exit
  1888                                  		
  1889                                  		KeyboardInterrupt_NoMatch_RestoreScreen:
  1890 00001A40 E89303                  			call restoreScreen
  1891 00001A43 C606[D60F]00            			mov byte[BusyMode], 0x00
  1892                                  			
  1893                                  	
  1894                                  	KeyboardInterrupt_Exit:
  1895                                  	
  1896 00001A48 B020                    		mov al, 0x20
  1897 00001A4A E620                    		out 0x20, al
  1898                                  		
  1899 00001A4C 1F                      		pop ds
  1900 00001A4D 5A                      		pop dx
  1901 00001A4E 5F                      		pop di
  1902 00001A4F 07                      		pop es
  1903 00001A50 58                      		pop ax
  1904 00001A51 CF                      		iret
  1905                                  	
  1906                                  RegisterJumpInterrupt:	
  1907                                  	; Save old keyboard interrupt
  1908 00001A52 31C0                    	xor ax, ax
  1909 00001A54 8EC0                    	mov es, ax ; point es to IVT base
  1910 00001A56 26A12400                	mov ax, [es:9 * 4]
  1911 00001A5A A3[C70F]                	mov [OldKeyboardInterrupt], ax ; save offset of old routine
  1912 00001A5D 26A12600                	mov ax, [es:9 * 4 + 2]
  1913 00001A61 A3[C90F]                	mov [OldKeyboardInterrupt + 2], ax ; save segment of old routine
  1914                                  
  1915 00001A64 FA                      	cli ; disable interrupts
  1916 00001A65 26C7062400[FC19]        	mov word[es:9 * 4], KeyboardInterrupt ; store offset at n * 4
  1917 00001A6C 268C0E2600              	mov [es:9 * 4 + 2], cs ; store segment at n * 4 + 2
  1918 00001A71 FB                      	sti ; enable interrupts
  1919                                  	
  1920 00001A72 C3                      	ret
  1921                                  	
  1922                                  RegisterInterrupts:
  1923 00001A73 E8DCFF                  	call RegisterJumpInterrupt
  1924                                  	
  1925 00001A76 C3                      	ret
  1926                                  	
  1927                                  	
  1928                                  timer:
  1929 00001A77 60                      	pusha
  1930 00001A78 1E                      	push ds
  1931 00001A79 0E                      	push cs
  1932 00001A7A 1F                      	pop ds
  1933                                  	
  1934 00001A7B B402                    	mov ah, 02h
  1935 00001A7D CD1A                    	int 0x1a
  1936                                  	
  1937 00001A7F 803E[D10F]01            	cmp byte[endCondition], 1
  1938 00001A84 7447                    	je ignore
  1939                                  	
  1940 00001A86 803E[D60F]01            	cmp byte[BusyMode], 1
  1941 00001A8B 7440                    	je ignore
  1942                                  	
  1943 00001A8D B800B8                  	mov ax, 0xB800
  1944 00001A90 8EC0                    	mov es, ax
  1945                                  		
  1946                                  		; cmp bx, [DaySkyColor]
  1947                                  		; je EndScreen
  1948 00001A92 52                      	push dx
  1949 00001A93 6A09                    	push 9
  1950 00001A95 E83C02                  	call mod   ;gives random num from 1 to 9 in global variable (tickcount)
  1951                                  	
  1952 00001A98 68980F                  	push 3992
  1953 00001A9B FF36[D20F]              	push word[BlueBrickCount]
  1954 00001A9F E8F401                  	call printnum2
  1955                                  	
  1956 00001AA2 E84AF8                  	call PlaceToMove
  1957 00001AA5 E85FF8                  	call PlaceToMoveCar
  1958 00001AA8 E874F8                  	call BrickToMove
  1959                                  	
  1960 00001AAB 8B3E[B90F]              	mov di, [rabbitStart]
  1961 00001AAF 81C7A000                	add di, 160
  1962                                  	
  1963 00001AB3 26813D2033              	cmp word [es:di], CYAN_COLOR
  1964 00001AB8 751A                    	jne assignZeroToBlueBrickCount   ;jackpot (random bug)
  1965                                  	
  1966 00001ABA 26813D2033              	cmp word [es:di], CYAN_COLOR
  1967 00001ABF 750C                    	jne ignore
  1968                                  
  1969 00001AC1 2EFF06[D20F]            	inc word [cs:BlueBrickCount]
  1970                                  	
  1971                                  	;debugging
  1972                                  debug:
  1973                                  	; mov cx, [SkyStart]
  1974                                  	; add cx, 20
  1975                                  	; push cx
  1976                                  	; mov cx, [BlueBrickCount]
  1977                                  	; push cx
  1978                                  	; call printnum2
  1979                                  	
  1980 00001AC6 833E[D20F]46            	cmp word [BlueBrickCount], 70
  1981 00001ACB 740F                    	je removeBlueBrick
  1982                                  	
  1983                                  ignore:
  1984                                  	
  1985                                  	; inc word [cs:tickcount]; increment tick count
  1986                                  	; push word [cs:tickcount]
  1987                                  
  1988                                  	; call printnum ; print tick count
  1989                                  	
  1990 00001ACD B020                    	mov al, 0x20
  1991 00001ACF E620                    	out 0x20, al ; end of interrupt
  1992                                  	
  1993 00001AD1 1F                      	pop ds
  1994 00001AD2 61                      	popa
  1995                                  	
  1996 00001AD3 CF                      	iret ; return from interrupt
  1997                                  	
  1998                                  	
  1999                                  assignZeroToBlueBrickCount:
  2000 00001AD4 C706[D20F]0000          	mov word[BlueBrickCount], 0x00
  2001                                  	
  2002 00001ADA EBEA                    	jmp debug
  2003                                  	
  2004                                  removeBlueBrick:
  2005 00001ADC 31FF                    	xor di, di
  2006 00001ADE BFF80D                  	mov di, 3576
  2007 00001AE1 8B1E[E70F]              	mov bx, [DaySkyColor]
  2008 00001AE5 B91E00                  	mov cx, 30
  2009                                  	
  2010                                  	brickRemoval:	
  2011 00001AE8 26891D                  		mov word [es:di], bx
  2012 00001AEB 83C702                  		add di, 2
  2013 00001AEE E2F8                    		loop brickRemoval
  2014                                  		
  2015                                  		
  2016 00001AF0 E8B1F6                  	call miniDelay
  2017 00001AF3 E8EE00                  	call EndScreen
  2018 00001AF6 EBD5                    	jmp ignore
  2019                                  	
  2020                                  TimerInterrupt:
  2021 00001AF8 31C0                    	xor ax, ax
  2022 00001AFA 8EC0                    	mov es, ax ; point es to IVT base
  2023                                  
  2024 00001AFC 26A12000                	mov ax, [es:8 * 4]
  2025 00001B00 A3[CB0F]                	mov [OldTimerInterrupt], ax ; save offset of old routine
  2026 00001B03 26A12200                	mov ax, [es:8 * 4 + 2]
  2027 00001B07 A3[CD0F]                	mov [OldTimerInterrupt + 2], ax ; save segment of old routine
  2028                                  
  2029 00001B0A FA                      	cli ; disable interrupts
  2030 00001B0B 26C7062000[771A]        	mov word [es:8*4], timer; store offset at n*4
  2031 00001B12 268C0E2200              	mov [es:8*4+2], cs ; store segment at n*4+2
  2032 00001B17 FB                      	sti ; enable interrupts
  2033                                  
  2034 00001B18 BA[F81A]                	mov dx, TimerInterrupt ; end of resident portion
  2035 00001B1B 83C20F                  	add dx, 15 ; round up to next para
  2036 00001B1E B104                    	mov cl, 4
  2037 00001B20 D3EA                    	shr dx, cl ; number of paras
  2038                                  	
  2039 00001B22 C3                      	ret
  2040                                  	
  2041                                  
  2042                                  TimerInterruptWrapper:
  2043 00001B23 E8D2FF                  	call TimerInterrupt
  2044                                  	
  2045 00001B26 C3                      	ret
  2046                                  		
  2047                                  		
  2048                                  longDelay:
  2049 00001B27 E84CF6                  	call delay
  2050 00001B2A E849F6                  	call delay
  2051 00001B2D E846F6                  	call delay
  2052 00001B30 E843F6                  	call delay
  2053 00001B33 E840F6                  	call delay
  2054 00001B36 E83DF6                  	call delay
  2055 00001B39 E83AF6                  	call delay	
  2056 00001B3C E837F6                  	call delay
  2057 00001B3F E834F6                  	call delay
  2058 00001B42 E831F6                  	call delay
  2059 00001B45 E82EF6                  	call delay
  2060 00001B48 E82BF6                  	call delay
  2061 00001B4B E828F6                  	call delay
  2062 00001B4E E825F6                  	call delay	
  2063 00001B51 E822F6                  	call delay
  2064 00001B54 E81FF6                  	call delay
  2065 00001B57 E81CF6                  	call delay
  2066 00001B5A E819F6                  	call delay
  2067 00001B5D E816F6                  	call delay
  2068 00001B60 E813F6                  	call delay
  2069 00001B63 E810F6                  	call delay	
  2070 00001B66 E80DF6                  	call delay
  2071 00001B69 E80AF6                  	call delay
  2072 00001B6C E807F6                  	call delay	
  2073 00001B6F E804F6                  	call delay
  2074 00001B72 E801F6                  	call delay
  2075 00001B75 E8FEF5                  	call delay
  2076 00001B78 E8FBF5                  	call delay
  2077 00001B7B E8F8F5                  	call delay
  2078 00001B7E E8F5F5                  	call delay
  2079 00001B81 E8F2F5                  	call delay
  2080 00001B84 EB00                    	jmp IntroScreen
  2081                                  		
  2082                                  		
  2083                                  ;Intro Screen using BIOS/DOS
  2084                                  
  2085                                  IntroScreen:
  2086 00001B86 55                      	push bp
  2087 00001B87 89E5                    	mov bp, sp
  2088                                  	
  2089 00001B89 60                      	pusha
  2090                                  	
  2091 00001B8A B413                    	mov ah, 0x13  ;write string in video mode
  2092 00001B8C B001                    	mov al, 0x01
  2093                                  	
  2094 00001B8E B700                    	mov bh, 0
  2095 00001B90 B347                    	mov bl, 01000111b
  2096                                  	
  2097                                  	;es:bp = ds:message
  2098 00001B92 1E                      	push ds
  2099 00001B93 07                      	pop es  ;es = ds
  2100                                  	
  2101 00001B94 B93600                  	mov cx, 54   ;length of title
  2102 00001B97 BA0B01                  	mov dx, 0x010B		;row & col
  2103 00001B9A BD[F30F]                	mov bp, Title0
  2104 00001B9D CD10                    	int 0x10   ;BIOS Vid Service
  2105                                  
  2106 00001B9F B90D00                  	mov cx, 13   ;length of string0
  2107 00001BA2 BA2006                  	mov dx, 0x0620		;row & col
  2108 00001BA5 BD[2910]                	mov bp, Intro0
  2109 00001BA8 CD10                    	int 0x10   ;BIOS Vid Service
  2110                                  	
  2111 00001BAA B91800                  	mov cx, 24   ;length of string1
  2112 00001BAD BA1908                  	mov dx, 0x0819   ;row & col
  2113 00001BB0 BD[3610]                	mov bp, Intro1
  2114 00001BB3 CD10                    	int 0x10   ;BIOS Vid Service
  2115                                  	
  2116 00001BB5 B91800                  	mov cx, 24   ;length of string2
  2117 00001BB8 BD[4E10]                	mov bp, Intro2
  2118 00001BBB BA1909                  	mov dx, 0x0919
  2119 00001BBE CD10                    	int 0x10   ;BIOS Vid Service	
  2120                                  	
  2121 00001BC0 B90C00                  	mov cx, 12   ;length of string3
  2122 00001BC3 BD[6610]                	mov bp, Instruction00
  2123 00001BC6 BA2111                  	mov dx, 0x1121
  2124 00001BC9 CD10                    	int 0x10   ;BIOS Vid Service
  2125                                  	
  2126 00001BCB B93400                  	mov cx, 52   ;length of string4
  2127 00001BCE BD[7210]                	mov bp, Instruction0
  2128 00001BD1 BA0514                  	mov dx, 0x1405
  2129 00001BD4 CD10                    	int 0x10   ;BIOS Vid Service	
  2130                                  	
  2131 00001BD6 B94600                  	mov cx, 70   ;length of string5
  2132 00001BD9 BD[A610]                	mov bp, Instruction1
  2133 00001BDC BA0515                  	mov dx, 0x1505
  2134 00001BDF CD10                    	int 0x10   ;BIOS Vid Service
  2135                                  	
  2136 00001BE1 61                      	popa
  2137 00001BE2 5D                      	pop bp
  2138                                  	
  2139 00001BE3 C3                      	ret
  2140                                  	
  2141                                  
  2142                                  ;End Screen using BIOS/DOS
  2143                                  
  2144                                  EndScreen:
  2145 00001BE4 55                      	push bp
  2146 00001BE5 89E5                    	mov bp, sp
  2147                                  	
  2148 00001BE7 60                      	pusha
  2149                                  	
  2150 00001BE8 C606[D10F]01            	mov byte[endCondition], 1
  2151 00001BED B413                    	mov ah, 0x13  ;write string in video mode
  2152 00001BEF B001                    	mov al, 0x01
  2153                                  	
  2154 00001BF1 B700                    	mov bh, 0
  2155 00001BF3 B347                    	mov bl, 01000111b
  2156                                  	
  2157                                  	;es:bp = ds:message
  2158 00001BF5 1E                      	push ds
  2159 00001BF6 07                      	pop es  ;es = ds
  2160                                  	
  2161 00001BF7 E854F5                  	call clrscr
  2162                                  	
  2163 00001BFA B90900                  	mov cx, 9   ;length of title
  2164 00001BFD BA1B05                  	mov dx, 0x051B		;row & col
  2165 00001C00 BD[EC10]                	mov bp, Conclusion0
  2166 00001C03 CD10                    	int 0x10   ;BIOS Vid Service
  2167                                  
  2168 00001C05 B90C00                  	mov cx, 12   ;length of string0
  2169 00001C08 BA1B07                  	mov dx, 0x071B		;row & col
  2170 00001C0B BD[F510]                	mov bp, Conclusion1
  2171 00001C0E CD10                    	int 0x10   ;BIOS Vid Service
  2172                                  	
  2173 00001C10 B800B8                  	mov ax, 0xB800
  2174 00001C13 8EC0                    	mov es, ax
  2175                                  	
  2176 00001C15 68AE04                  	push 1198
  2177 00001C18 A1[E10F]                	mov ax, [ScoreToDisplay]
  2178 00001C1B 50                      	push ax
  2179 00001C1C E87700                  	call printnum2
  2180                                  	
  2181 00001C1F 61                      	popa
  2182 00001C20 5D                      	pop bp
  2183                                  	
  2184 00001C21 C3                      	ret
  2185                                  	
  2186                                  	
  2187                                  ;Confirmation Screen using BIOS/DOS Services	
  2188                                  ConfirmationScreen:
  2189 00001C22 55                      	push bp
  2190 00001C23 89E5                    	mov bp, sp
  2191                                  	
  2192 00001C25 60                      	pusha
  2193 00001C26 1E                      	push ds
  2194 00001C27 06                      	push es
  2195                                  	
  2196 00001C28 E88901                  	call saveScreen
  2197 00001C2B E820F5                  	call clrscr
  2198                                  	
  2199 00001C2E B413                    	mov ah, 0x13  ;write string in video mode
  2200 00001C30 B001                    	mov al, 0x01
  2201                                  	
  2202 00001C32 B700                    	mov bh, 0
  2203 00001C34 B347                    	mov bl, 01000111b
  2204                                  	
  2205                                  	;es:bp = ds:message
  2206 00001C36 1E                      	push ds
  2207 00001C37 07                      	pop es  ;es = ds
  2208                                  	
  2209 00001C38 B91E00                  	mov cx, 30   ;length of title
  2210 00001C3B BA1B09                  	mov dx, 0x091B		;row & col
  2211 00001C3E BD[0111]                	mov bp, Confirmation0
  2212 00001C41 CD10                    	int 0x10   ;BIOS Vid Service
  2213                                  
  2214 00001C43 B92F00                  	mov cx, 47   ;length of string0
  2215 00001C46 BA150A                  	mov dx, 0x0A15		;row & col
  2216 00001C49 BD[1F11]                	mov bp, Confirmation1
  2217 00001C4C CD10                    	int 0x10   ;BIOS Vid Service	 
  2218                                  
  2219 00001C4E C606[D60F]01            	mov byte[BusyMode], 0x01
  2220                                  	
  2221                                  popThis:
  2222 00001C53 07                      	pop es
  2223 00001C54 1F                      	pop ds
  2224 00001C55 61                      	popa
  2225 00001C56 5D                      	pop bp
  2226                                  	
  2227 00001C57 C3                      	ret
  2228                                  	
  2229                                  
  2230                                  printnum:
  2231 00001C58 55                      	push bp
  2232 00001C59 89E5                    	mov bp, sp
  2233 00001C5B 06                      	push es
  2234 00001C5C 50                      	push ax
  2235 00001C5D 53                      	push bx
  2236 00001C5E 51                      	push cx
  2237 00001C5F 52                      	push dx
  2238 00001C60 57                      	push di
  2239 00001C61 B800B8                  	mov ax, 0xb800
  2240 00001C64 8EC0                    	mov es, ax ; point es to video base
  2241 00001C66 8B4604                  	mov ax, [bp+4] ; load number in ax
  2242 00001C69 BB0A00                  	mov bx, 10 ; use base 10 for division
  2243 00001C6C B90000                  	mov cx, 0 ; initialize count of digits
  2244 00001C6F BA0000                  	nextdigit: mov dx, 0 ; zero upper half of dividend
  2245 00001C72 F7F3                    	div bx ; divide by 10
  2246 00001C74 80C230                  	add dl, 0x30 ; convert digit into ascii value
  2247 00001C77 52                      	push dx ; save ascii value on stack
  2248 00001C78 41                      	inc cx ; increment count of values
  2249 00001C79 83F800                  	cmp ax, 0 ; is the quotient zero
  2250 00001C7C 75F1                    	jnz nextdigit ; if no divide it again
  2251 00001C7E BFA00F                  	mov di, 4000 ; point di to 70th column
  2252 00001C81 5A                      	nextpos: pop dx ; remove a digit from the stack
  2253 00001C82 B607                    	mov dh, 0x07 ; use normal attribute
  2254 00001C84 268915                  	mov [es:di], dx ; print char on screen
  2255 00001C87 83C702                  	add di, 2 ; move to next screen location
  2256 00001C8A E2F5                    	loop nextpos ; repeat for all digits on stack
  2257 00001C8C 5F                      	pop di
  2258 00001C8D 5A                      	pop dx
  2259 00001C8E 59                      	pop cx
  2260 00001C8F 5B                      	pop bx
  2261 00001C90 58                      	pop ax 
  2262 00001C91 07                      	pop es
  2263 00001C92 5D                      	pop bp
  2264 00001C93 C20200                  	ret 2
  2265                                  
  2266                                  
  2267                                  printnum2:
  2268 00001C96 55                      	push bp
  2269 00001C97 89E5                    	mov bp, sp
  2270 00001C99 06                      	push es
  2271 00001C9A 50                      	push ax
  2272 00001C9B 53                      	push bx
  2273 00001C9C 51                      	push cx
  2274 00001C9D 52                      	push dx
  2275 00001C9E 57                      	push di
  2276 00001C9F B800B8                  	mov ax, 0xb800
  2277 00001CA2 8EC0                    	mov es, ax ; point es to video base
  2278 00001CA4 8B4604                  	mov ax, [bp+4] ; load number in ax
  2279 00001CA7 BB0A00                  	mov bx, 10 ; use base 10 for division
  2280 00001CAA B90000                  	mov cx, 0 ; initialize count of digits
  2281 00001CAD BA0000                  	nextdigit2: mov dx, 0 ; zero upper half of dividend
  2282 00001CB0 F7F3                    	div bx ; divide by 10
  2283 00001CB2 80C230                  	add dl, 0x30 ; convert digit into ascii value
  2284 00001CB5 52                      	push dx ; save ascii value on stack
  2285 00001CB6 41                      	inc cx ; increment count of values
  2286 00001CB7 83F800                  	cmp ax, 0 ; is the quotient zero
  2287 00001CBA 75F1                    	jnz nextdigit2 ; if no divide it again
  2288 00001CBC 8B7E06                  	mov di, [bp + 6] ; point di to 70th column
  2289 00001CBF 5A                      	nextpos2: pop dx ; remove a digit from the stack
  2290 00001CC0 B607                    	mov dh, 0x07 ; use normal attribute
  2291 00001CC2 268915                  	mov [es:di], dx ; print char on screen
  2292 00001CC5 83C702                  	add di, 2 ; move to next screen location
  2293 00001CC8 E2F5                    	loop nextpos2; repeat for all digits on stack
  2294 00001CCA 5F                      	pop di
  2295 00001CCB 5A                      	pop dx
  2296 00001CCC 59                      	pop cx
  2297 00001CCD 5B                      	pop bx
  2298 00001CCE 58                      	pop ax 
  2299 00001CCF 07                      	pop es
  2300 00001CD0 5D                      	pop bp
  2301 00001CD1 C20400                  	ret 4
  2302                                  	
  2303                                  
  2304                                  mod:
  2305 00001CD4 55                      	push bp
  2306 00001CD5 89E5                    	mov bp, sp
  2307 00001CD7 60                      	pusha
  2308                                  	
  2309 00001CD8 8B4606                  	mov ax, [bp + 6]
  2310                                  	
  2311 00001CDB 8B5E04                  	mov bx, [bp + 4]
  2312 00001CDE 83FB00                  	cmp bx, 0
  2313 00001CE1 740A                    	je end4
  2314                                  	
  2315                                  loop:
  2316 00001CE3 29D8                    	sub ax, bx
  2317                                  	
  2318 00001CE5 39D8                    	cmp ax, bx
  2319 00001CE7 73FA                    	jae loop
  2320 00001CE9 2EA3[CF0F]              	mov [cs:tickcount], ax
  2321                                  	; push ax
  2322                                  	; call printnum
  2323                                  	
  2324                                  end4:
  2325 00001CED 61                      	popa
  2326 00001CEE 5D                      	pop bp
  2327 00001CEF C20400                  	ret 4
  2328                                  	
  2329                                  	
  2330                                  mod2:
  2331 00001CF2 55                      	push bp
  2332 00001CF3 89E5                    	mov bp, sp
  2333 00001CF5 60                      	pusha
  2334                                  	
  2335 00001CF6 8B4606                  	mov ax, [bp + 6]
  2336                                  	
  2337 00001CF9 8B5E04                  	mov bx, [bp + 4]
  2338 00001CFC 83FB00                  	cmp bx, 0
  2339 00001CFF 740E                    	je end42
  2340                                  	
  2341                                  loop222:
  2342 00001D01 29D8                    	sub ax, bx
  2343                                  	
  2344 00001D03 39D8                    	cmp ax, bx
  2345 00001D05 73FA                    	jae loop222
  2346 00001D07 2EA3[D40F]              	mov [cs:BlueBrickTemp], ax
  2347 00001D0B 50                      	push ax
  2348 00001D0C E849FF                  	call printnum
  2349                                  	
  2350                                  end42:
  2351 00001D0F 61                      	popa
  2352 00001D10 5D                      	pop bp
  2353 00001D11 C20400                  	ret 4
  2354                                  	
  2355                                  sound:
  2356 00001D14 60                      		pusha
  2357 00001D15 B90500                  		mov cx, 5
  2358 00001D18 B0B6                    loopForMusic1:         mov al, 0b6h
  2359 00001D1A E643                    	out 43h, al
  2360                                  
  2361                                  	;load the counter 2 value for d3
  2362 00001D1C B8B41F                  	mov ax, 1fb4h
  2363 00001D1F E642                    	out 42h, al
  2364 00001D21 88E0                    	mov al, ah
  2365 00001D23 E642                    	out 42h, al
  2366                                  
  2367                                  	;turn the speaker on
  2368 00001D25 E461                    	in al, 61h
  2369 00001D27 88C4                    	mov ah,al
  2370 00001D29 0C03                    	or al, 3h
  2371 00001D2B E661                    	out 61h, al
  2372 00001D2D 88E0                    	mov al, ah
  2373 00001D2F E661                    	out 61h, al
  2374                                  
  2375                                  
  2376                                  	;load the counter 2 value for a3
  2377 00001D31 B82F15                  	mov ax, 152fh
  2378 00001D34 E642                    	out 42h, al
  2379 00001D36 88E0                    	mov al, ah
  2380 00001D38 E642                    	out 42h, al
  2381                                  
  2382                                  	;turn the speaker on
  2383 00001D3A E461                    	in al, 61h
  2384 00001D3C 88C4                    	mov ah,al
  2385 00001D3E 0C03                    	or al, 3h
  2386 00001D40 E661                    	out 61h, al
  2387 00001D42 88E0                    	mov al, ah
  2388 00001D44 E661                    	out 61h, al
  2389                                  
  2390                                  		
  2391                                  	;load the counter 2 value for a4
  2392 00001D46 B8970A                  	mov ax, 0A97h
  2393 00001D49 E642                    	out 42h, al
  2394 00001D4B 88E0                    	mov al, ah
  2395 00001D4D E642                    	out 42h, al
  2396                                  		
  2397                                  	;turn the speaker on
  2398 00001D4F E461                    	in al, 61h
  2399 00001D51 88C4                    	mov ah,al
  2400 00001D53 0C03                    	or al, 3h
  2401 00001D55 E661                    	out 61h, al
  2402 00001D57 E81CF4                  	call delay
  2403 00001D5A 88E0                    	mov al, ah
  2404 00001D5C E661                    	out 61h, al
  2405                                  
  2406                                  	 
  2407 00001D5E E2B8                    	 loop loopForMusic1
  2408                                  	 
  2409 00001D60 61                      	 popa
  2410 00001D61 C3                      	 ret
  2411                                  checkBlueBrick:
  2412 00001D62 55                      	push bp
  2413 00001D63 89E5                    	mov bp, sp
  2414 00001D65 60                      	pusha
  2415                                  	
  2416 00001D66 B800B8                  	mov ax, 0xB800
  2417 00001D69 8EC0                    	mov es, ax
  2418                                  	
  2419 00001D6B 8B3E[B90F]              	mov di, [rabbitStart]
  2420 00001D6F 81C7A000                	add di, 160
  2421 00001D73 B82033                  	mov ax, CYAN_COLOR
  2422                                  	
  2423 00001D76 263905                  	cmp word [es:di], ax
  2424 00001D79 7500                    	jne popthisShit
  2425                                  	
  2426                                  	
  2427                                  	; cmp word [BlueBrickCount], 80
  2428                                  	; call EndScreen
  2429                                  	
  2430                                  	
  2431                                  popthisShit:	
  2432 00001D7B 61                      	popa
  2433 00001D7C 5D                      	pop bp
  2434 00001D7D C3                      	ret
  2435                                  	
  2436                                  unhook_KeyBoardInterrupt:
  2437 00001D7E 50                      	push ax
  2438 00001D7F 06                      	push es
  2439                                  	
  2440 00001D80 31C0                    	xor ax, ax
  2441 00001D82 8EC0                    	mov es, ax
  2442                                  	
  2443 00001D84 A1[C70F]                	mov ax, [OldKeyboardInterrupt]								; read old offset in ax
  2444 00001D87 8B1E[C90F]              	mov bx, [OldKeyboardInterrupt+2]								; read old segment in bx
  2445                                  	
  2446 00001D8B FA                      	cli												; disable interrupts
  2447 00001D8C 26A32400                	mov [es:9*4], ax								; restore old offset from ax
  2448 00001D90 26891E2600              	mov [es:9*4+2], bx								; restore old segment from bx
  2449 00001D95 FB                      	sti		
  2450                                  	
  2451 00001D96 07                      	pop es
  2452 00001D97 58                      	pop ax
  2453 00001D98 C3                      	ret
  2454                                  	
  2455                                  unhook_TimerInterrupt:
  2456 00001D99 50                      	push ax
  2457 00001D9A 06                      	push es
  2458                                  	
  2459 00001D9B 31C0                    	xor ax, ax
  2460 00001D9D 8EC0                    	mov es, ax
  2461                                  	
  2462 00001D9F A1[CB0F]                	mov ax, [OldTimerInterrupt]								; read old offset in ax
  2463 00001DA2 8B1E[CD0F]              	mov bx, [OldTimerInterrupt+2]								; read old segment in bx
  2464                                  	
  2465 00001DA6 FA                      	cli												; disable interrupts
  2466 00001DA7 26A32000                	mov [es:8*4], ax								; restore old offset from ax
  2467 00001DAB 26891E2200              	mov [es:8*4+2], bx								; restore old segment from bx
  2468 00001DB0 FB                      	sti		
  2469                                  	
  2470 00001DB1 07                      	pop es
  2471 00001DB2 58                      	pop ax
  2472 00001DB3 C3                      	ret
  2473                                  
  2474                                  savs:
  2475                                  	saveScreen:
  2476 00001DB4 06                      		push es
  2477 00001DB5 50                      		push ax
  2478 00001DB6 57                      		push di
  2479 00001DB7 1E                      		push ds
  2480 00001DB8 56                      		push si
  2481 00001DB9 51                      		push cx
  2482                                  		
  2483 00001DBA BF[0500]                		mov di, screenBuffer
  2484 00001DBD 31F6                    		xor si, si
  2485 00001DBF 8CC8                    		mov ax, cs
  2486 00001DC1 8EC0                    		mov es, ax
  2487 00001DC3 B800B8                  		mov ax, 0xb800 					; load video base in ax
  2488 00001DC6 8ED8                    		mov ds, ax
  2489                                  		
  2490                                  		; [es:di] = [ds:si]
  2491 00001DC8 B9A00F                  		mov cx, (80*25*2)
  2492 00001DCB FC                      		cld
  2493 00001DCC F3A4                    		rep movsb
  2494                                  			
  2495 00001DCE 59                      		pop cx
  2496 00001DCF 5E                      		pop si
  2497 00001DD0 1F                      		pop ds
  2498 00001DD1 5F                      		pop di
  2499 00001DD2 58                      		pop ax
  2500 00001DD3 07                      		pop es
  2501 00001DD4 C3                      		ret
  2502                                  	
  2503 00001DD5 C3                      	ret
  2504                                  	
  2505                                  restoreScreen:
  2506 00001DD6 06                      	push es
  2507 00001DD7 50                      	push ax
  2508 00001DD8 57                      	push di
  2509 00001DD9 1E                      	push ds
  2510 00001DDA 56                      	push si
  2511 00001DDB 51                      	push cx
  2512                                  	
  2513 00001DDC 31FF                    	xor di, di
  2514 00001DDE BE[0500]                	mov si, screenBuffer
  2515 00001DE1 8CC8                    	mov ax, cs
  2516 00001DE3 8ED8                    	mov ds, ax
  2517 00001DE5 B800B8                  	mov ax, 0xb800 					; load video base in ax
  2518 00001DE8 8EC0                    	mov es, ax
  2519                                  	
  2520                                  	; [es:di] = [ds:si]
  2521 00001DEA B9A00F                  	mov cx, (80*25*2)
  2522 00001DED FC                      	cld
  2523 00001DEE F3A4                    	rep movsb
  2524                                  		
  2525 00001DF0 59                      	pop cx
  2526 00001DF1 5E                      	pop si
  2527 00001DF2 1F                      	pop ds
  2528 00001DF3 5F                      	pop di
  2529 00001DF4 58                      	pop ax
  2530 00001DF5 07                      	pop es
  2531 00001DF6 C3                      	ret
  2532                                  	
  2533                                  	
  2534                                  IntroScreenWrapper:
  2535 00001DF7 E88CFD                  	call IntroScreen
  2536 00001DFA E82AFD                  	call longDelay
  2537 00001DFD E827FD                  	call longDelay
  2538                                  	; mov ah, 0 ; service 0 – get keystroke
  2539                                  	; int 0x16 ; call BIOS keyboard service
  2540                                  	
  2541 00001E00 C3                      	ret
  2542                                  	
  2543                                  InterruptWrapper:
  2544 00001E01 E86FFC                  	call RegisterInterrupts
  2545 00001E04 E81CFD                  	call TimerInterruptWrapper	
  2546                                  
  2547 00001E07 C3                      	ret	
  2548                                  	
  2549                                  				
  2550                                  	MainDraw:	
  2551 00001E08 E86BF6                  				call printBackground
  2552 00001E0B E838F7                  				call printroad
  2553 00001E0E E814F5                  				call printCar
  2554 00001E11 E8DDF8                  				call rabbitAndArea
  2555                                  				
  2556                                  				; call move   ;function that makes animations
  2557                                  				pangeLeteRaho:
  2558 00001E14 803E[D10F]00            					cmp byte[endCondition], 0
  2559 00001E19 74F9                    					je pangeLeteRaho
  2560                                  				
  2561 00001E1B E8C6FD                  				call EndScreen
  2562 00001E1E C3                      				ret
  2563                                  				
  2564                                  	Game:
  2565 00001E1F E8D5FF                  		call IntroScreenWrapper
  2566 00001E22 E8DCFF                  		call InterruptWrapper
  2567 00001E25 E8E0FF                  		call MainDraw
  2568                                  					
  2569 00001E28 C3                      		ret
  2570                                  		
  2571                                  start:
  2572 00001E29 E822F3                  		call clrscr ; call the clrscr subroutine
  2573                                  		
  2574 00001E2C E8F0FF                  		call Game
  2575                                  		
  2576                                  mainEnd:
  2577 00001E2F E84CFF                  		call unhook_KeyBoardInterrupt
  2578 00001E32 E864FF                  		call unhook_TimerInterrupt
  2579                                  		
  2580 00001E35 B8004C                  		mov ax, 0x4c00 ; terminate program
  2581 00001E38 CD21                    		int 0x21
